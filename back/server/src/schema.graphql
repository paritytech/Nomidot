
# import * from './generated/prisma.graphql'

type Query {
  blockNumbers(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockNumber]!
  eras(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Era]!
  heartBeats(where: HeartBeatWhereInput, orderBy: HeartBeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HeartBeat]!
  nominations(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nomination]!
  offlineValidators(where: OfflineValidatorWhereInput, orderBy: OfflineValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OfflineValidator]!
  rewards(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reward]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  slashings(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slashing]!
  stakes(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stake]!
  totalIssuances(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TotalIssuance]!
  validators(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Validator]!
  
  blockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  era(where: EraWhereUniqueInput!): Era
  nomination(where: NominationWhereUniqueInput!): Nomination
  reward(where: RewardWhereUniqueInput!): Reward
  session(where: SessionWhereUniqueInput!): Session
  slashing(where: SlashingWhereUniqueInput!): Slashing
  stake(where: StakeWhereUniqueInput!): Stake
  totalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  validator(where: ValidatorWhereUniqueInput!): Validator
  
  council(where: CouncilWhereUniqueInput!): Council
  councils(where: CouncilWhereInput, orderBy: CouncilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Council]!

  councilMember(where: CouncilMemberWhereUniqueInput!): CouncilMember
  councilMembers(where: CouncilMemberWhereInput, orderBy: CouncilMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CouncilMember]!

  motion(where: MotionWhereUniqueInput!): Motion
  motions(where: MotionWhereInput, orderBy: MotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Motion]!

  motionProposalArgument(where: MotionProposalArgumentWhereUniqueInput!): MotionProposalArgument
  motionProposalArguments(where: MotionProposalArgumentWhereInput, orderBy: MotionProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionProposalArgument]!
  
  motionStatus(where: MotionStatusWhereUniqueInput!): MotionStatus
  motionStatuses(where: MotionStatusWhereInput, orderBy: MotionStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionStatus]!
  
  preimage(where: PreimageWhereUniqueInput!): Preimage
  preimages(where: PreimageWhereInput, orderBy: PreimageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preimage]!
  
  preimageArgument(where: PreimageArgumentWhereUniqueInput!): PreimageArgument
  preimageArguments(where: PreimageArgumentWhereInput, orderBy: PreimageArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageArgument]!
  
  preimageStatus(where: PreimageStatusWhereUniqueInput!): PreimageStatus
  preimageStatuses(where: PreimageStatusWhereInput, orderBy: PreimageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageStatus]!
  
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  
  proposalStatus(where: ProposalStatusWhereUniqueInput!): ProposalStatus
  proposalStatuses(where: ProposalStatusWhereInput, orderBy: ProposalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalStatus]!
  
  treasurySpendProposal(where: TreasurySpendProposalWhereUniqueInput!): TreasurySpendProposal
  treasurySpendProposals(where: TreasurySpendProposalWhereInput, orderBy: TreasurySpendProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TreasurySpendProposal]!

  treasuryStatus(where: TreasuryStatusWhereUniqueInput!): TreasuryStatus
  treasuryStatuses(where: TreasuryStatusWhereInput, orderBy: TreasuryStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TreasuryStatus]!

  referendum(where: ReferendumWhereUniqueInput!): Referendum
  referendums(where: ReferendumWhereInput, orderBy: ReferendumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Referendum]!
  
  referendumStatus(where: ReferendumStatusWhereUniqueInput!): ReferendumStatus
  referendumStatuses(where: ReferendumStatusWhereInput, orderBy: ReferendumStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReferendumStatus]!
  
  
}

type Subscription {
  subscribeBlockNumbers: BlockNumber
  subscribeEras: Era
  subscribeHeartBeats: HeartBeat
  subscribeNominations: Nomination
  subscribeOfflineValidators: OfflineValidator
  subscribeRewards: Reward
  subscribeSessions: Session
  subscribeSlashings: Slashing
  subscribeStakes: Stake
  subscribeValidators: Validator
  subscribeProposal: Proposal
  subscribeMotion: Motion
  subscribeTreasurySpendProposal: TreasurySpendProposal
  subscribeReferendum: Referendum
}