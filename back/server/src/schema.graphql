
# import * from './generated/prisma.graphql'

type Query {
  eras(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Era]!
  slashings(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slashing]!
  validators(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Validator]!
  totalIssuances(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TotalIssuance]!
  rewards(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reward]!
  nominations(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nomination]!
  stakes(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stake]!
  blockNumbers(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockNumber]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!

  blockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  era(where: EraWhereUniqueInput!): Era
  nomination(where: NominationWhereUniqueInput!): Nomination
  reward(where: RewardWhereUniqueInput!): Reward
  session(where: SessionWhereUniqueInput!): Session
  slashing(where: SlashingWhereUniqueInput!): Slashing
  stake(where: StakeWhereUniqueInput!): Stake
  totalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  validator(where: ValidatorWhereUniqueInput!): Validator
}

type Subscription {
  chainBestBlockNumber: BlockNumber
  subscribeNewSession: Session
}