// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBlockIndex {
  count: Int!
}

type AggregateBlockNumber {
  count: Int!
}

type AggregateCouncil {
  count: Int!
}

type AggregateCouncilMember {
  count: Int!
}

type AggregateEra {
  count: Int!
}

type AggregateHeartBeat {
  count: Int!
}

type AggregateMotion {
  count: Int!
}

type AggregateMotionProposalArgument {
  count: Int!
}

type AggregateMotionStatus {
  count: Int!
}

type AggregateNomination {
  count: Int!
}

type AggregateOfflineValidator {
  count: Int!
}

type AggregatePreimage {
  count: Int!
}

type AggregatePreimageArgument {
  count: Int!
}

type AggregatePreimageStatus {
  count: Int!
}

type AggregateProposal {
  count: Int!
}

type AggregateProposalStatus {
  count: Int!
}

type AggregateReferendum {
  count: Int!
}

type AggregateReferendumStatus {
  count: Int!
}

type AggregateReward {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSlashing {
  count: Int!
}

type AggregateStake {
  count: Int!
}

type AggregateTotalIssuance {
  count: Int!
}

type AggregateTreasurySpendProposal {
  count: Int!
}

type AggregateTreasuryStatus {
  count: Int!
}

type AggregateValidator {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BlockIndex {
  id: ID!
  identifier: String!
  startFrom: Int!
  index: Int!
}

type BlockIndexConnection {
  pageInfo: PageInfo!
  edges: [BlockIndexEdge]!
  aggregate: AggregateBlockIndex!
}

input BlockIndexCreateInput {
  id: ID
  identifier: String!
  startFrom: Int!
  index: Int!
}

type BlockIndexEdge {
  node: BlockIndex!
  cursor: String!
}

enum BlockIndexOrderByInput {
  id_ASC
  id_DESC
  identifier_ASC
  identifier_DESC
  startFrom_ASC
  startFrom_DESC
  index_ASC
  index_DESC
}

type BlockIndexPreviousValues {
  id: ID!
  identifier: String!
  startFrom: Int!
  index: Int!
}

type BlockIndexSubscriptionPayload {
  mutation: MutationType!
  node: BlockIndex
  updatedFields: [String!]
  previousValues: BlockIndexPreviousValues
}

input BlockIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockIndexWhereInput
  AND: [BlockIndexSubscriptionWhereInput!]
  OR: [BlockIndexSubscriptionWhereInput!]
  NOT: [BlockIndexSubscriptionWhereInput!]
}

input BlockIndexUpdateInput {
  identifier: String
  startFrom: Int
  index: Int
}

input BlockIndexUpdateManyMutationInput {
  identifier: String
  startFrom: Int
  index: Int
}

input BlockIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_lt: String
  identifier_lte: String
  identifier_gt: String
  identifier_gte: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  startFrom: Int
  startFrom_not: Int
  startFrom_in: [Int!]
  startFrom_not_in: [Int!]
  startFrom_lt: Int
  startFrom_lte: Int
  startFrom_gt: Int
  startFrom_gte: Int
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  AND: [BlockIndexWhereInput!]
  OR: [BlockIndexWhereInput!]
  NOT: [BlockIndexWhereInput!]
}

input BlockIndexWhereUniqueInput {
  id: ID
  identifier: String
}

type BlockNumber {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

type BlockNumberConnection {
  pageInfo: PageInfo!
  edges: [BlockNumberEdge]!
  aggregate: AggregateBlockNumber!
}

input BlockNumberCreateInput {
  id: ID
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

input BlockNumberCreateOneInput {
  create: BlockNumberCreateInput
  connect: BlockNumberWhereUniqueInput
}

type BlockNumberEdge {
  node: BlockNumber!
  cursor: String!
}

enum BlockNumberOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  authoredBy_ASC
  authoredBy_DESC
  startDateTime_ASC
  startDateTime_DESC
  hash_ASC
  hash_DESC
}

type BlockNumberPreviousValues {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

type BlockNumberSubscriptionPayload {
  mutation: MutationType!
  node: BlockNumber
  updatedFields: [String!]
  previousValues: BlockNumberPreviousValues
}

input BlockNumberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockNumberWhereInput
  AND: [BlockNumberSubscriptionWhereInput!]
  OR: [BlockNumberSubscriptionWhereInput!]
  NOT: [BlockNumberSubscriptionWhereInput!]
}

input BlockNumberUpdateDataInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateManyMutationInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateOneRequiredInput {
  create: BlockNumberCreateInput
  update: BlockNumberUpdateDataInput
  upsert: BlockNumberUpsertNestedInput
  connect: BlockNumberWhereUniqueInput
}

input BlockNumberUpsertNestedInput {
  update: BlockNumberUpdateDataInput!
  create: BlockNumberCreateInput!
}

input BlockNumberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  authoredBy: String
  authoredBy_not: String
  authoredBy_in: [String!]
  authoredBy_not_in: [String!]
  authoredBy_lt: String
  authoredBy_lte: String
  authoredBy_gt: String
  authoredBy_gte: String
  authoredBy_contains: String
  authoredBy_not_contains: String
  authoredBy_starts_with: String
  authoredBy_not_starts_with: String
  authoredBy_ends_with: String
  authoredBy_not_ends_with: String
  startDateTime: DateTime
  startDateTime_not: DateTime
  startDateTime_in: [DateTime!]
  startDateTime_not_in: [DateTime!]
  startDateTime_lt: DateTime
  startDateTime_lte: DateTime
  startDateTime_gt: DateTime
  startDateTime_gte: DateTime
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  AND: [BlockNumberWhereInput!]
  OR: [BlockNumberWhereInput!]
  NOT: [BlockNumberWhereInput!]
}

input BlockNumberWhereUniqueInput {
  id: ID
  number: Int
  hash: String
}

type Council {
  id: ID!
  blockNumber: BlockNumber!
  members(where: CouncilMemberWhereInput, orderBy: CouncilMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CouncilMember!]
}

type CouncilConnection {
  pageInfo: PageInfo!
  edges: [CouncilEdge]!
  aggregate: AggregateCouncil!
}

input CouncilCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  members: CouncilMemberCreateManyWithoutCouncilsInput
}

input CouncilCreateManyWithoutMembersInput {
  create: [CouncilCreateWithoutMembersInput!]
  connect: [CouncilWhereUniqueInput!]
}

input CouncilCreateWithoutMembersInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
}

type CouncilEdge {
  node: Council!
  cursor: String!
}

type CouncilMember {
  id: ID!
  address: String!
  councils(where: CouncilWhereInput, orderBy: CouncilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Council!]
}

type CouncilMemberConnection {
  pageInfo: PageInfo!
  edges: [CouncilMemberEdge]!
  aggregate: AggregateCouncilMember!
}

input CouncilMemberCreateInput {
  id: ID
  address: String!
  councils: CouncilCreateManyWithoutMembersInput
}

input CouncilMemberCreateManyWithoutCouncilsInput {
  create: [CouncilMemberCreateWithoutCouncilsInput!]
  connect: [CouncilMemberWhereUniqueInput!]
}

input CouncilMemberCreateWithoutCouncilsInput {
  id: ID
  address: String!
}

type CouncilMemberEdge {
  node: CouncilMember!
  cursor: String!
}

enum CouncilMemberOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
}

type CouncilMemberPreviousValues {
  id: ID!
  address: String!
}

input CouncilMemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [CouncilMemberScalarWhereInput!]
  OR: [CouncilMemberScalarWhereInput!]
  NOT: [CouncilMemberScalarWhereInput!]
}

type CouncilMemberSubscriptionPayload {
  mutation: MutationType!
  node: CouncilMember
  updatedFields: [String!]
  previousValues: CouncilMemberPreviousValues
}

input CouncilMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CouncilMemberWhereInput
  AND: [CouncilMemberSubscriptionWhereInput!]
  OR: [CouncilMemberSubscriptionWhereInput!]
  NOT: [CouncilMemberSubscriptionWhereInput!]
}

input CouncilMemberUpdateInput {
  address: String
  councils: CouncilUpdateManyWithoutMembersInput
}

input CouncilMemberUpdateManyDataInput {
  address: String
}

input CouncilMemberUpdateManyMutationInput {
  address: String
}

input CouncilMemberUpdateManyWithoutCouncilsInput {
  create: [CouncilMemberCreateWithoutCouncilsInput!]
  delete: [CouncilMemberWhereUniqueInput!]
  connect: [CouncilMemberWhereUniqueInput!]
  set: [CouncilMemberWhereUniqueInput!]
  disconnect: [CouncilMemberWhereUniqueInput!]
  update: [CouncilMemberUpdateWithWhereUniqueWithoutCouncilsInput!]
  upsert: [CouncilMemberUpsertWithWhereUniqueWithoutCouncilsInput!]
  deleteMany: [CouncilMemberScalarWhereInput!]
  updateMany: [CouncilMemberUpdateManyWithWhereNestedInput!]
}

input CouncilMemberUpdateManyWithWhereNestedInput {
  where: CouncilMemberScalarWhereInput!
  data: CouncilMemberUpdateManyDataInput!
}

input CouncilMemberUpdateWithoutCouncilsDataInput {
  address: String
}

input CouncilMemberUpdateWithWhereUniqueWithoutCouncilsInput {
  where: CouncilMemberWhereUniqueInput!
  data: CouncilMemberUpdateWithoutCouncilsDataInput!
}

input CouncilMemberUpsertWithWhereUniqueWithoutCouncilsInput {
  where: CouncilMemberWhereUniqueInput!
  update: CouncilMemberUpdateWithoutCouncilsDataInput!
  create: CouncilMemberCreateWithoutCouncilsInput!
}

input CouncilMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  councils_every: CouncilWhereInput
  councils_some: CouncilWhereInput
  councils_none: CouncilWhereInput
  AND: [CouncilMemberWhereInput!]
  OR: [CouncilMemberWhereInput!]
  NOT: [CouncilMemberWhereInput!]
}

input CouncilMemberWhereUniqueInput {
  id: ID
  address: String
}

enum CouncilOrderByInput {
  id_ASC
  id_DESC
}

type CouncilPreviousValues {
  id: ID!
}

input CouncilScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [CouncilScalarWhereInput!]
  OR: [CouncilScalarWhereInput!]
  NOT: [CouncilScalarWhereInput!]
}

type CouncilSubscriptionPayload {
  mutation: MutationType!
  node: Council
  updatedFields: [String!]
  previousValues: CouncilPreviousValues
}

input CouncilSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CouncilWhereInput
  AND: [CouncilSubscriptionWhereInput!]
  OR: [CouncilSubscriptionWhereInput!]
  NOT: [CouncilSubscriptionWhereInput!]
}

input CouncilUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  members: CouncilMemberUpdateManyWithoutCouncilsInput
}

input CouncilUpdateManyWithoutMembersInput {
  create: [CouncilCreateWithoutMembersInput!]
  delete: [CouncilWhereUniqueInput!]
  connect: [CouncilWhereUniqueInput!]
  set: [CouncilWhereUniqueInput!]
  disconnect: [CouncilWhereUniqueInput!]
  update: [CouncilUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [CouncilUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [CouncilScalarWhereInput!]
}

input CouncilUpdateWithoutMembersDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
}

input CouncilUpdateWithWhereUniqueWithoutMembersInput {
  where: CouncilWhereUniqueInput!
  data: CouncilUpdateWithoutMembersDataInput!
}

input CouncilUpsertWithWhereUniqueWithoutMembersInput {
  where: CouncilWhereUniqueInput!
  update: CouncilUpdateWithoutMembersDataInput!
  create: CouncilCreateWithoutMembersInput!
}

input CouncilWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  members_every: CouncilMemberWhereInput
  members_some: CouncilMemberWhereInput
  members_none: CouncilMemberWhereInput
  AND: [CouncilWhereInput!]
  OR: [CouncilWhereInput!]
  NOT: [CouncilWhereInput!]
}

input CouncilWhereUniqueInput {
  id: ID
}

scalar DateTime

type Era {
  id: ID!
  index: Int!
  eraStartSessionIndex: Session!
  totalPoints: String!
  individualPoints: [String!]!
}

type EraConnection {
  pageInfo: PageInfo!
  edges: [EraEdge]!
  aggregate: AggregateEra!
}

input EraCreateindividualPointsInput {
  set: [String!]
}

input EraCreateInput {
  id: ID
  index: Int!
  eraStartSessionIndex: SessionCreateOneInput!
  totalPoints: String!
  individualPoints: EraCreateindividualPointsInput
}

type EraEdge {
  node: Era!
  cursor: String!
}

enum EraOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  totalPoints_ASC
  totalPoints_DESC
}

type EraPreviousValues {
  id: ID!
  index: Int!
  totalPoints: String!
  individualPoints: [String!]!
}

type EraSubscriptionPayload {
  mutation: MutationType!
  node: Era
  updatedFields: [String!]
  previousValues: EraPreviousValues
}

input EraSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EraWhereInput
  AND: [EraSubscriptionWhereInput!]
  OR: [EraSubscriptionWhereInput!]
  NOT: [EraSubscriptionWhereInput!]
}

input EraUpdateindividualPointsInput {
  set: [String!]
}

input EraUpdateInput {
  index: Int
  eraStartSessionIndex: SessionUpdateOneRequiredInput
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
}

input EraUpdateManyMutationInput {
  index: Int
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
}

input EraWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  eraStartSessionIndex: SessionWhereInput
  totalPoints: String
  totalPoints_not: String
  totalPoints_in: [String!]
  totalPoints_not_in: [String!]
  totalPoints_lt: String
  totalPoints_lte: String
  totalPoints_gt: String
  totalPoints_gte: String
  totalPoints_contains: String
  totalPoints_not_contains: String
  totalPoints_starts_with: String
  totalPoints_not_starts_with: String
  totalPoints_ends_with: String
  totalPoints_not_ends_with: String
  AND: [EraWhereInput!]
  OR: [EraWhereInput!]
  NOT: [EraWhereInput!]
}

input EraWhereUniqueInput {
  id: ID
  index: Int
}

type HeartBeat {
  id: ID!
  sessionIndex: Session!
  authorityId: String!
}

type HeartBeatConnection {
  pageInfo: PageInfo!
  edges: [HeartBeatEdge]!
  aggregate: AggregateHeartBeat!
}

input HeartBeatCreateInput {
  id: ID
  sessionIndex: SessionCreateOneInput!
  authorityId: String!
}

type HeartBeatEdge {
  node: HeartBeat!
  cursor: String!
}

enum HeartBeatOrderByInput {
  id_ASC
  id_DESC
  authorityId_ASC
  authorityId_DESC
}

type HeartBeatPreviousValues {
  id: ID!
  authorityId: String!
}

type HeartBeatSubscriptionPayload {
  mutation: MutationType!
  node: HeartBeat
  updatedFields: [String!]
  previousValues: HeartBeatPreviousValues
}

input HeartBeatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeartBeatWhereInput
  AND: [HeartBeatSubscriptionWhereInput!]
  OR: [HeartBeatSubscriptionWhereInput!]
  NOT: [HeartBeatSubscriptionWhereInput!]
}

input HeartBeatUpdateInput {
  sessionIndex: SessionUpdateOneRequiredInput
  authorityId: String
}

input HeartBeatUpdateManyMutationInput {
  authorityId: String
}

input HeartBeatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sessionIndex: SessionWhereInput
  authorityId: String
  authorityId_not: String
  authorityId_in: [String!]
  authorityId_not_in: [String!]
  authorityId_lt: String
  authorityId_lte: String
  authorityId_gt: String
  authorityId_gte: String
  authorityId_contains: String
  authorityId_not_contains: String
  authorityId_starts_with: String
  authorityId_not_starts_with: String
  authorityId_ends_with: String
  authorityId_not_ends_with: String
  AND: [HeartBeatWhereInput!]
  OR: [HeartBeatWhereInput!]
  NOT: [HeartBeatWhereInput!]
}

input HeartBeatWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Motion {
  id: Int!
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalArguments(where: MotionProposalArgumentWhereInput, orderBy: MotionProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionProposalArgument!]
  motionProposalHash: String!
  motionProposalId: Int!
  motionStatus(where: MotionStatusWhereInput, orderBy: MotionStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionStatus!]
  preimage: Preimage
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposal
  section: String!
}

type MotionConnection {
  pageInfo: PageInfo!
  edges: [MotionEdge]!
  aggregate: AggregateMotion!
}

input MotionCreateInput {
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalArguments: MotionProposalArgumentCreateManyWithoutMotionInput
  motionProposalHash: String!
  motionProposalId: Int!
  motionStatus: MotionStatusCreateManyWithoutMotionInput
  preimage: PreimageCreateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalCreateOneWithoutMotionInput
  section: String!
}

input MotionCreateOneWithoutMotionProposalArgumentsInput {
  create: MotionCreateWithoutMotionProposalArgumentsInput
  connect: MotionWhereUniqueInput
}

input MotionCreateOneWithoutMotionStatusInput {
  create: MotionCreateWithoutMotionStatusInput
  connect: MotionWhereUniqueInput
}

input MotionCreateOneWithoutPreimageInput {
  create: MotionCreateWithoutPreimageInput
  connect: MotionWhereUniqueInput
}

input MotionCreateOneWithoutTreasurySpendProposalInput {
  create: MotionCreateWithoutTreasurySpendProposalInput
  connect: MotionWhereUniqueInput
}

input MotionCreateWithoutMotionProposalArgumentsInput {
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalHash: String!
  motionProposalId: Int!
  motionStatus: MotionStatusCreateManyWithoutMotionInput
  preimage: PreimageCreateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalCreateOneWithoutMotionInput
  section: String!
}

input MotionCreateWithoutMotionStatusInput {
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalArguments: MotionProposalArgumentCreateManyWithoutMotionInput
  motionProposalHash: String!
  motionProposalId: Int!
  preimage: PreimageCreateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalCreateOneWithoutMotionInput
  section: String!
}

input MotionCreateWithoutPreimageInput {
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalArguments: MotionProposalArgumentCreateManyWithoutMotionInput
  motionProposalHash: String!
  motionProposalId: Int!
  motionStatus: MotionStatusCreateManyWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalCreateOneWithoutMotionInput
  section: String!
}

input MotionCreateWithoutTreasurySpendProposalInput {
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalArguments: MotionProposalArgumentCreateManyWithoutMotionInput
  motionProposalHash: String!
  motionProposalId: Int!
  motionStatus: MotionStatusCreateManyWithoutMotionInput
  preimage: PreimageCreateOneWithoutMotionInput
  preimageHash: String
  section: String!
}

type MotionEdge {
  node: Motion!
  cursor: String!
}

enum MotionOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  memberCount_ASC
  memberCount_DESC
  metaDescription_ASC
  metaDescription_DESC
  method_ASC
  method_DESC
  motionProposalHash_ASC
  motionProposalHash_DESC
  motionProposalId_ASC
  motionProposalId_DESC
  preimageHash_ASC
  preimageHash_DESC
  section_ASC
  section_DESC
}

type MotionPreviousValues {
  id: Int!
  author: String!
  memberCount: Int!
  metaDescription: String!
  method: String!
  motionProposalHash: String!
  motionProposalId: Int!
  preimageHash: String
  section: String!
}

type MotionProposalArgument {
  id: ID!
  name: String!
  motion: Motion!
  value: String!
}

type MotionProposalArgumentConnection {
  pageInfo: PageInfo!
  edges: [MotionProposalArgumentEdge]!
  aggregate: AggregateMotionProposalArgument!
}

input MotionProposalArgumentCreateInput {
  id: ID
  name: String!
  motion: MotionCreateOneWithoutMotionProposalArgumentsInput!
  value: String!
}

input MotionProposalArgumentCreateManyWithoutMotionInput {
  create: [MotionProposalArgumentCreateWithoutMotionInput!]
  connect: [MotionProposalArgumentWhereUniqueInput!]
}

input MotionProposalArgumentCreateWithoutMotionInput {
  id: ID
  name: String!
  value: String!
}

type MotionProposalArgumentEdge {
  node: MotionProposalArgument!
  cursor: String!
}

enum MotionProposalArgumentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
}

type MotionProposalArgumentPreviousValues {
  id: ID!
  name: String!
  value: String!
}

input MotionProposalArgumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [MotionProposalArgumentScalarWhereInput!]
  OR: [MotionProposalArgumentScalarWhereInput!]
  NOT: [MotionProposalArgumentScalarWhereInput!]
}

type MotionProposalArgumentSubscriptionPayload {
  mutation: MutationType!
  node: MotionProposalArgument
  updatedFields: [String!]
  previousValues: MotionProposalArgumentPreviousValues
}

input MotionProposalArgumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MotionProposalArgumentWhereInput
  AND: [MotionProposalArgumentSubscriptionWhereInput!]
  OR: [MotionProposalArgumentSubscriptionWhereInput!]
  NOT: [MotionProposalArgumentSubscriptionWhereInput!]
}

input MotionProposalArgumentUpdateInput {
  name: String
  motion: MotionUpdateOneRequiredWithoutMotionProposalArgumentsInput
  value: String
}

input MotionProposalArgumentUpdateManyDataInput {
  name: String
  value: String
}

input MotionProposalArgumentUpdateManyMutationInput {
  name: String
  value: String
}

input MotionProposalArgumentUpdateManyWithoutMotionInput {
  create: [MotionProposalArgumentCreateWithoutMotionInput!]
  delete: [MotionProposalArgumentWhereUniqueInput!]
  connect: [MotionProposalArgumentWhereUniqueInput!]
  set: [MotionProposalArgumentWhereUniqueInput!]
  disconnect: [MotionProposalArgumentWhereUniqueInput!]
  update: [MotionProposalArgumentUpdateWithWhereUniqueWithoutMotionInput!]
  upsert: [MotionProposalArgumentUpsertWithWhereUniqueWithoutMotionInput!]
  deleteMany: [MotionProposalArgumentScalarWhereInput!]
  updateMany: [MotionProposalArgumentUpdateManyWithWhereNestedInput!]
}

input MotionProposalArgumentUpdateManyWithWhereNestedInput {
  where: MotionProposalArgumentScalarWhereInput!
  data: MotionProposalArgumentUpdateManyDataInput!
}

input MotionProposalArgumentUpdateWithoutMotionDataInput {
  name: String
  value: String
}

input MotionProposalArgumentUpdateWithWhereUniqueWithoutMotionInput {
  where: MotionProposalArgumentWhereUniqueInput!
  data: MotionProposalArgumentUpdateWithoutMotionDataInput!
}

input MotionProposalArgumentUpsertWithWhereUniqueWithoutMotionInput {
  where: MotionProposalArgumentWhereUniqueInput!
  update: MotionProposalArgumentUpdateWithoutMotionDataInput!
  create: MotionProposalArgumentCreateWithoutMotionInput!
}

input MotionProposalArgumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  motion: MotionWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [MotionProposalArgumentWhereInput!]
  OR: [MotionProposalArgumentWhereInput!]
  NOT: [MotionProposalArgumentWhereInput!]
}

input MotionProposalArgumentWhereUniqueInput {
  id: ID
}

type MotionStatus {
  id: ID!
  blockNumber: BlockNumber!
  motion: Motion!
  status: String!
  uniqueStatus: String!
}

type MotionStatusConnection {
  pageInfo: PageInfo!
  edges: [MotionStatusEdge]!
  aggregate: AggregateMotionStatus!
}

input MotionStatusCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  motion: MotionCreateOneWithoutMotionStatusInput!
  status: String!
  uniqueStatus: String!
}

input MotionStatusCreateManyWithoutMotionInput {
  create: [MotionStatusCreateWithoutMotionInput!]
  connect: [MotionStatusWhereUniqueInput!]
}

input MotionStatusCreateWithoutMotionInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  status: String!
  uniqueStatus: String!
}

type MotionStatusEdge {
  node: MotionStatus!
  cursor: String!
}

enum MotionStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  uniqueStatus_ASC
  uniqueStatus_DESC
}

type MotionStatusPreviousValues {
  id: ID!
  status: String!
  uniqueStatus: String!
}

input MotionStatusScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [MotionStatusScalarWhereInput!]
  OR: [MotionStatusScalarWhereInput!]
  NOT: [MotionStatusScalarWhereInput!]
}

type MotionStatusSubscriptionPayload {
  mutation: MutationType!
  node: MotionStatus
  updatedFields: [String!]
  previousValues: MotionStatusPreviousValues
}

input MotionStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MotionStatusWhereInput
  AND: [MotionStatusSubscriptionWhereInput!]
  OR: [MotionStatusSubscriptionWhereInput!]
  NOT: [MotionStatusSubscriptionWhereInput!]
}

input MotionStatusUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  motion: MotionUpdateOneRequiredWithoutMotionStatusInput
  status: String
  uniqueStatus: String
}

input MotionStatusUpdateManyDataInput {
  status: String
  uniqueStatus: String
}

input MotionStatusUpdateManyMutationInput {
  status: String
  uniqueStatus: String
}

input MotionStatusUpdateManyWithoutMotionInput {
  create: [MotionStatusCreateWithoutMotionInput!]
  delete: [MotionStatusWhereUniqueInput!]
  connect: [MotionStatusWhereUniqueInput!]
  set: [MotionStatusWhereUniqueInput!]
  disconnect: [MotionStatusWhereUniqueInput!]
  update: [MotionStatusUpdateWithWhereUniqueWithoutMotionInput!]
  upsert: [MotionStatusUpsertWithWhereUniqueWithoutMotionInput!]
  deleteMany: [MotionStatusScalarWhereInput!]
  updateMany: [MotionStatusUpdateManyWithWhereNestedInput!]
}

input MotionStatusUpdateManyWithWhereNestedInput {
  where: MotionStatusScalarWhereInput!
  data: MotionStatusUpdateManyDataInput!
}

input MotionStatusUpdateWithoutMotionDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  status: String
  uniqueStatus: String
}

input MotionStatusUpdateWithWhereUniqueWithoutMotionInput {
  where: MotionStatusWhereUniqueInput!
  data: MotionStatusUpdateWithoutMotionDataInput!
}

input MotionStatusUpsertWithWhereUniqueWithoutMotionInput {
  where: MotionStatusWhereUniqueInput!
  update: MotionStatusUpdateWithoutMotionDataInput!
  create: MotionStatusCreateWithoutMotionInput!
}

input MotionStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  motion: MotionWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [MotionStatusWhereInput!]
  OR: [MotionStatusWhereInput!]
  NOT: [MotionStatusWhereInput!]
}

input MotionStatusWhereUniqueInput {
  id: ID
  uniqueStatus: String
}

type MotionSubscriptionPayload {
  mutation: MutationType!
  node: Motion
  updatedFields: [String!]
  previousValues: MotionPreviousValues
}

input MotionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MotionWhereInput
  AND: [MotionSubscriptionWhereInput!]
  OR: [MotionSubscriptionWhereInput!]
  NOT: [MotionSubscriptionWhereInput!]
}

input MotionUpdateInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalArguments: MotionProposalArgumentUpdateManyWithoutMotionInput
  motionProposalHash: String
  motionProposalId: Int
  motionStatus: MotionStatusUpdateManyWithoutMotionInput
  preimage: PreimageUpdateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalUpdateOneWithoutMotionInput
  section: String
}

input MotionUpdateManyMutationInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalHash: String
  motionProposalId: Int
  preimageHash: String
  section: String
}

input MotionUpdateOneRequiredWithoutMotionProposalArgumentsInput {
  create: MotionCreateWithoutMotionProposalArgumentsInput
  update: MotionUpdateWithoutMotionProposalArgumentsDataInput
  upsert: MotionUpsertWithoutMotionProposalArgumentsInput
  connect: MotionWhereUniqueInput
}

input MotionUpdateOneRequiredWithoutMotionStatusInput {
  create: MotionCreateWithoutMotionStatusInput
  update: MotionUpdateWithoutMotionStatusDataInput
  upsert: MotionUpsertWithoutMotionStatusInput
  connect: MotionWhereUniqueInput
}

input MotionUpdateOneWithoutPreimageInput {
  create: MotionCreateWithoutPreimageInput
  update: MotionUpdateWithoutPreimageDataInput
  upsert: MotionUpsertWithoutPreimageInput
  delete: Boolean
  disconnect: Boolean
  connect: MotionWhereUniqueInput
}

input MotionUpdateOneWithoutTreasurySpendProposalInput {
  create: MotionCreateWithoutTreasurySpendProposalInput
  update: MotionUpdateWithoutTreasurySpendProposalDataInput
  upsert: MotionUpsertWithoutTreasurySpendProposalInput
  delete: Boolean
  disconnect: Boolean
  connect: MotionWhereUniqueInput
}

input MotionUpdateWithoutMotionProposalArgumentsDataInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalHash: String
  motionProposalId: Int
  motionStatus: MotionStatusUpdateManyWithoutMotionInput
  preimage: PreimageUpdateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalUpdateOneWithoutMotionInput
  section: String
}

input MotionUpdateWithoutMotionStatusDataInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalArguments: MotionProposalArgumentUpdateManyWithoutMotionInput
  motionProposalHash: String
  motionProposalId: Int
  preimage: PreimageUpdateOneWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalUpdateOneWithoutMotionInput
  section: String
}

input MotionUpdateWithoutPreimageDataInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalArguments: MotionProposalArgumentUpdateManyWithoutMotionInput
  motionProposalHash: String
  motionProposalId: Int
  motionStatus: MotionStatusUpdateManyWithoutMotionInput
  preimageHash: String
  treasurySpendProposal: TreasurySpendProposalUpdateOneWithoutMotionInput
  section: String
}

input MotionUpdateWithoutTreasurySpendProposalDataInput {
  author: String
  memberCount: Int
  metaDescription: String
  method: String
  motionProposalArguments: MotionProposalArgumentUpdateManyWithoutMotionInput
  motionProposalHash: String
  motionProposalId: Int
  motionStatus: MotionStatusUpdateManyWithoutMotionInput
  preimage: PreimageUpdateOneWithoutMotionInput
  preimageHash: String
  section: String
}

input MotionUpsertWithoutMotionProposalArgumentsInput {
  update: MotionUpdateWithoutMotionProposalArgumentsDataInput!
  create: MotionCreateWithoutMotionProposalArgumentsInput!
}

input MotionUpsertWithoutMotionStatusInput {
  update: MotionUpdateWithoutMotionStatusDataInput!
  create: MotionCreateWithoutMotionStatusInput!
}

input MotionUpsertWithoutPreimageInput {
  update: MotionUpdateWithoutPreimageDataInput!
  create: MotionCreateWithoutPreimageInput!
}

input MotionUpsertWithoutTreasurySpendProposalInput {
  update: MotionUpdateWithoutTreasurySpendProposalDataInput!
  create: MotionCreateWithoutTreasurySpendProposalInput!
}

input MotionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  memberCount: Int
  memberCount_not: Int
  memberCount_in: [Int!]
  memberCount_not_in: [Int!]
  memberCount_lt: Int
  memberCount_lte: Int
  memberCount_gt: Int
  memberCount_gte: Int
  metaDescription: String
  metaDescription_not: String
  metaDescription_in: [String!]
  metaDescription_not_in: [String!]
  metaDescription_lt: String
  metaDescription_lte: String
  metaDescription_gt: String
  metaDescription_gte: String
  metaDescription_contains: String
  metaDescription_not_contains: String
  metaDescription_starts_with: String
  metaDescription_not_starts_with: String
  metaDescription_ends_with: String
  metaDescription_not_ends_with: String
  method: String
  method_not: String
  method_in: [String!]
  method_not_in: [String!]
  method_lt: String
  method_lte: String
  method_gt: String
  method_gte: String
  method_contains: String
  method_not_contains: String
  method_starts_with: String
  method_not_starts_with: String
  method_ends_with: String
  method_not_ends_with: String
  motionProposalArguments_every: MotionProposalArgumentWhereInput
  motionProposalArguments_some: MotionProposalArgumentWhereInput
  motionProposalArguments_none: MotionProposalArgumentWhereInput
  motionProposalHash: String
  motionProposalHash_not: String
  motionProposalHash_in: [String!]
  motionProposalHash_not_in: [String!]
  motionProposalHash_lt: String
  motionProposalHash_lte: String
  motionProposalHash_gt: String
  motionProposalHash_gte: String
  motionProposalHash_contains: String
  motionProposalHash_not_contains: String
  motionProposalHash_starts_with: String
  motionProposalHash_not_starts_with: String
  motionProposalHash_ends_with: String
  motionProposalHash_not_ends_with: String
  motionProposalId: Int
  motionProposalId_not: Int
  motionProposalId_in: [Int!]
  motionProposalId_not_in: [Int!]
  motionProposalId_lt: Int
  motionProposalId_lte: Int
  motionProposalId_gt: Int
  motionProposalId_gte: Int
  motionStatus_every: MotionStatusWhereInput
  motionStatus_some: MotionStatusWhereInput
  motionStatus_none: MotionStatusWhereInput
  preimage: PreimageWhereInput
  preimageHash: String
  preimageHash_not: String
  preimageHash_in: [String!]
  preimageHash_not_in: [String!]
  preimageHash_lt: String
  preimageHash_lte: String
  preimageHash_gt: String
  preimageHash_gte: String
  preimageHash_contains: String
  preimageHash_not_contains: String
  preimageHash_starts_with: String
  preimageHash_not_starts_with: String
  preimageHash_ends_with: String
  preimageHash_not_ends_with: String
  treasurySpendProposal: TreasurySpendProposalWhereInput
  section: String
  section_not: String
  section_in: [String!]
  section_not_in: [String!]
  section_lt: String
  section_lte: String
  section_gt: String
  section_gte: String
  section_contains: String
  section_not_contains: String
  section_starts_with: String
  section_not_starts_with: String
  section_ends_with: String
  section_not_ends_with: String
  AND: [MotionWhereInput!]
  OR: [MotionWhereInput!]
  NOT: [MotionWhereInput!]
}

input MotionWhereUniqueInput {
  id: Int
  motionProposalId: Int
}

type Mutation {
  createBlockIndex(data: BlockIndexCreateInput!): BlockIndex!
  updateBlockIndex(data: BlockIndexUpdateInput!, where: BlockIndexWhereUniqueInput!): BlockIndex
  updateManyBlockIndexes(data: BlockIndexUpdateManyMutationInput!, where: BlockIndexWhereInput): BatchPayload!
  upsertBlockIndex(where: BlockIndexWhereUniqueInput!, create: BlockIndexCreateInput!, update: BlockIndexUpdateInput!): BlockIndex!
  deleteBlockIndex(where: BlockIndexWhereUniqueInput!): BlockIndex
  deleteManyBlockIndexes(where: BlockIndexWhereInput): BatchPayload!
  createBlockNumber(data: BlockNumberCreateInput!): BlockNumber!
  updateBlockNumber(data: BlockNumberUpdateInput!, where: BlockNumberWhereUniqueInput!): BlockNumber
  updateManyBlockNumbers(data: BlockNumberUpdateManyMutationInput!, where: BlockNumberWhereInput): BatchPayload!
  upsertBlockNumber(where: BlockNumberWhereUniqueInput!, create: BlockNumberCreateInput!, update: BlockNumberUpdateInput!): BlockNumber!
  deleteBlockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  deleteManyBlockNumbers(where: BlockNumberWhereInput): BatchPayload!
  createCouncil(data: CouncilCreateInput!): Council!
  updateCouncil(data: CouncilUpdateInput!, where: CouncilWhereUniqueInput!): Council
  upsertCouncil(where: CouncilWhereUniqueInput!, create: CouncilCreateInput!, update: CouncilUpdateInput!): Council!
  deleteCouncil(where: CouncilWhereUniqueInput!): Council
  deleteManyCouncils(where: CouncilWhereInput): BatchPayload!
  createCouncilMember(data: CouncilMemberCreateInput!): CouncilMember!
  updateCouncilMember(data: CouncilMemberUpdateInput!, where: CouncilMemberWhereUniqueInput!): CouncilMember
  updateManyCouncilMembers(data: CouncilMemberUpdateManyMutationInput!, where: CouncilMemberWhereInput): BatchPayload!
  upsertCouncilMember(where: CouncilMemberWhereUniqueInput!, create: CouncilMemberCreateInput!, update: CouncilMemberUpdateInput!): CouncilMember!
  deleteCouncilMember(where: CouncilMemberWhereUniqueInput!): CouncilMember
  deleteManyCouncilMembers(where: CouncilMemberWhereInput): BatchPayload!
  createEra(data: EraCreateInput!): Era!
  updateEra(data: EraUpdateInput!, where: EraWhereUniqueInput!): Era
  updateManyEras(data: EraUpdateManyMutationInput!, where: EraWhereInput): BatchPayload!
  upsertEra(where: EraWhereUniqueInput!, create: EraCreateInput!, update: EraUpdateInput!): Era!
  deleteEra(where: EraWhereUniqueInput!): Era
  deleteManyEras(where: EraWhereInput): BatchPayload!
  createHeartBeat(data: HeartBeatCreateInput!): HeartBeat!
  updateHeartBeat(data: HeartBeatUpdateInput!, where: HeartBeatWhereUniqueInput!): HeartBeat
  updateManyHeartBeats(data: HeartBeatUpdateManyMutationInput!, where: HeartBeatWhereInput): BatchPayload!
  upsertHeartBeat(where: HeartBeatWhereUniqueInput!, create: HeartBeatCreateInput!, update: HeartBeatUpdateInput!): HeartBeat!
  deleteHeartBeat(where: HeartBeatWhereUniqueInput!): HeartBeat
  deleteManyHeartBeats(where: HeartBeatWhereInput): BatchPayload!
  createMotion(data: MotionCreateInput!): Motion!
  updateMotion(data: MotionUpdateInput!, where: MotionWhereUniqueInput!): Motion
  updateManyMotions(data: MotionUpdateManyMutationInput!, where: MotionWhereInput): BatchPayload!
  upsertMotion(where: MotionWhereUniqueInput!, create: MotionCreateInput!, update: MotionUpdateInput!): Motion!
  deleteMotion(where: MotionWhereUniqueInput!): Motion
  deleteManyMotions(where: MotionWhereInput): BatchPayload!
  createMotionProposalArgument(data: MotionProposalArgumentCreateInput!): MotionProposalArgument!
  updateMotionProposalArgument(data: MotionProposalArgumentUpdateInput!, where: MotionProposalArgumentWhereUniqueInput!): MotionProposalArgument
  updateManyMotionProposalArguments(data: MotionProposalArgumentUpdateManyMutationInput!, where: MotionProposalArgumentWhereInput): BatchPayload!
  upsertMotionProposalArgument(where: MotionProposalArgumentWhereUniqueInput!, create: MotionProposalArgumentCreateInput!, update: MotionProposalArgumentUpdateInput!): MotionProposalArgument!
  deleteMotionProposalArgument(where: MotionProposalArgumentWhereUniqueInput!): MotionProposalArgument
  deleteManyMotionProposalArguments(where: MotionProposalArgumentWhereInput): BatchPayload!
  createMotionStatus(data: MotionStatusCreateInput!): MotionStatus!
  updateMotionStatus(data: MotionStatusUpdateInput!, where: MotionStatusWhereUniqueInput!): MotionStatus
  updateManyMotionStatuses(data: MotionStatusUpdateManyMutationInput!, where: MotionStatusWhereInput): BatchPayload!
  upsertMotionStatus(where: MotionStatusWhereUniqueInput!, create: MotionStatusCreateInput!, update: MotionStatusUpdateInput!): MotionStatus!
  deleteMotionStatus(where: MotionStatusWhereUniqueInput!): MotionStatus
  deleteManyMotionStatuses(where: MotionStatusWhereInput): BatchPayload!
  createNomination(data: NominationCreateInput!): Nomination!
  updateNomination(data: NominationUpdateInput!, where: NominationWhereUniqueInput!): Nomination
  updateManyNominations(data: NominationUpdateManyMutationInput!, where: NominationWhereInput): BatchPayload!
  upsertNomination(where: NominationWhereUniqueInput!, create: NominationCreateInput!, update: NominationUpdateInput!): Nomination!
  deleteNomination(where: NominationWhereUniqueInput!): Nomination
  deleteManyNominations(where: NominationWhereInput): BatchPayload!
  createOfflineValidator(data: OfflineValidatorCreateInput!): OfflineValidator!
  updateOfflineValidator(data: OfflineValidatorUpdateInput!, where: OfflineValidatorWhereUniqueInput!): OfflineValidator
  updateManyOfflineValidators(data: OfflineValidatorUpdateManyMutationInput!, where: OfflineValidatorWhereInput): BatchPayload!
  upsertOfflineValidator(where: OfflineValidatorWhereUniqueInput!, create: OfflineValidatorCreateInput!, update: OfflineValidatorUpdateInput!): OfflineValidator!
  deleteOfflineValidator(where: OfflineValidatorWhereUniqueInput!): OfflineValidator
  deleteManyOfflineValidators(where: OfflineValidatorWhereInput): BatchPayload!
  createPreimage(data: PreimageCreateInput!): Preimage!
  updatePreimage(data: PreimageUpdateInput!, where: PreimageWhereUniqueInput!): Preimage
  updateManyPreimages(data: PreimageUpdateManyMutationInput!, where: PreimageWhereInput): BatchPayload!
  upsertPreimage(where: PreimageWhereUniqueInput!, create: PreimageCreateInput!, update: PreimageUpdateInput!): Preimage!
  deletePreimage(where: PreimageWhereUniqueInput!): Preimage
  deleteManyPreimages(where: PreimageWhereInput): BatchPayload!
  createPreimageArgument(data: PreimageArgumentCreateInput!): PreimageArgument!
  updatePreimageArgument(data: PreimageArgumentUpdateInput!, where: PreimageArgumentWhereUniqueInput!): PreimageArgument
  updateManyPreimageArguments(data: PreimageArgumentUpdateManyMutationInput!, where: PreimageArgumentWhereInput): BatchPayload!
  upsertPreimageArgument(where: PreimageArgumentWhereUniqueInput!, create: PreimageArgumentCreateInput!, update: PreimageArgumentUpdateInput!): PreimageArgument!
  deletePreimageArgument(where: PreimageArgumentWhereUniqueInput!): PreimageArgument
  deleteManyPreimageArguments(where: PreimageArgumentWhereInput): BatchPayload!
  createPreimageStatus(data: PreimageStatusCreateInput!): PreimageStatus!
  updatePreimageStatus(data: PreimageStatusUpdateInput!, where: PreimageStatusWhereUniqueInput!): PreimageStatus
  updateManyPreimageStatuses(data: PreimageStatusUpdateManyMutationInput!, where: PreimageStatusWhereInput): BatchPayload!
  upsertPreimageStatus(where: PreimageStatusWhereUniqueInput!, create: PreimageStatusCreateInput!, update: PreimageStatusUpdateInput!): PreimageStatus!
  deletePreimageStatus(where: PreimageStatusWhereUniqueInput!): PreimageStatus
  deleteManyPreimageStatuses(where: PreimageStatusWhereInput): BatchPayload!
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateManyProposals(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  upsertProposal(where: ProposalWhereUniqueInput!, create: ProposalCreateInput!, update: ProposalUpdateInput!): Proposal!
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteManyProposals(where: ProposalWhereInput): BatchPayload!
  createProposalStatus(data: ProposalStatusCreateInput!): ProposalStatus!
  updateProposalStatus(data: ProposalStatusUpdateInput!, where: ProposalStatusWhereUniqueInput!): ProposalStatus
  updateManyProposalStatuses(data: ProposalStatusUpdateManyMutationInput!, where: ProposalStatusWhereInput): BatchPayload!
  upsertProposalStatus(where: ProposalStatusWhereUniqueInput!, create: ProposalStatusCreateInput!, update: ProposalStatusUpdateInput!): ProposalStatus!
  deleteProposalStatus(where: ProposalStatusWhereUniqueInput!): ProposalStatus
  deleteManyProposalStatuses(where: ProposalStatusWhereInput): BatchPayload!
  createReferendum(data: ReferendumCreateInput!): Referendum!
  updateReferendum(data: ReferendumUpdateInput!, where: ReferendumWhereUniqueInput!): Referendum
  updateManyReferendums(data: ReferendumUpdateManyMutationInput!, where: ReferendumWhereInput): BatchPayload!
  upsertReferendum(where: ReferendumWhereUniqueInput!, create: ReferendumCreateInput!, update: ReferendumUpdateInput!): Referendum!
  deleteReferendum(where: ReferendumWhereUniqueInput!): Referendum
  deleteManyReferendums(where: ReferendumWhereInput): BatchPayload!
  createReferendumStatus(data: ReferendumStatusCreateInput!): ReferendumStatus!
  updateReferendumStatus(data: ReferendumStatusUpdateInput!, where: ReferendumStatusWhereUniqueInput!): ReferendumStatus
  updateManyReferendumStatuses(data: ReferendumStatusUpdateManyMutationInput!, where: ReferendumStatusWhereInput): BatchPayload!
  upsertReferendumStatus(where: ReferendumStatusWhereUniqueInput!, create: ReferendumStatusCreateInput!, update: ReferendumStatusUpdateInput!): ReferendumStatus!
  deleteReferendumStatus(where: ReferendumStatusWhereUniqueInput!): ReferendumStatus
  deleteManyReferendumStatuses(where: ReferendumStatusWhereInput): BatchPayload!
  createReward(data: RewardCreateInput!): Reward!
  updateReward(data: RewardUpdateInput!, where: RewardWhereUniqueInput!): Reward
  updateManyRewards(data: RewardUpdateManyMutationInput!, where: RewardWhereInput): BatchPayload!
  upsertReward(where: RewardWhereUniqueInput!, create: RewardCreateInput!, update: RewardUpdateInput!): Reward!
  deleteReward(where: RewardWhereUniqueInput!): Reward
  deleteManyRewards(where: RewardWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createSlashing(data: SlashingCreateInput!): Slashing!
  updateSlashing(data: SlashingUpdateInput!, where: SlashingWhereUniqueInput!): Slashing
  updateManySlashings(data: SlashingUpdateManyMutationInput!, where: SlashingWhereInput): BatchPayload!
  upsertSlashing(where: SlashingWhereUniqueInput!, create: SlashingCreateInput!, update: SlashingUpdateInput!): Slashing!
  deleteSlashing(where: SlashingWhereUniqueInput!): Slashing
  deleteManySlashings(where: SlashingWhereInput): BatchPayload!
  createStake(data: StakeCreateInput!): Stake!
  updateStake(data: StakeUpdateInput!, where: StakeWhereUniqueInput!): Stake
  updateManyStakes(data: StakeUpdateManyMutationInput!, where: StakeWhereInput): BatchPayload!
  upsertStake(where: StakeWhereUniqueInput!, create: StakeCreateInput!, update: StakeUpdateInput!): Stake!
  deleteStake(where: StakeWhereUniqueInput!): Stake
  deleteManyStakes(where: StakeWhereInput): BatchPayload!
  createTotalIssuance(data: TotalIssuanceCreateInput!): TotalIssuance!
  updateTotalIssuance(data: TotalIssuanceUpdateInput!, where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  updateManyTotalIssuances(data: TotalIssuanceUpdateManyMutationInput!, where: TotalIssuanceWhereInput): BatchPayload!
  upsertTotalIssuance(where: TotalIssuanceWhereUniqueInput!, create: TotalIssuanceCreateInput!, update: TotalIssuanceUpdateInput!): TotalIssuance!
  deleteTotalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  deleteManyTotalIssuances(where: TotalIssuanceWhereInput): BatchPayload!
  createTreasurySpendProposal(data: TreasurySpendProposalCreateInput!): TreasurySpendProposal!
  updateTreasurySpendProposal(data: TreasurySpendProposalUpdateInput!, where: TreasurySpendProposalWhereUniqueInput!): TreasurySpendProposal
  updateManyTreasurySpendProposals(data: TreasurySpendProposalUpdateManyMutationInput!, where: TreasurySpendProposalWhereInput): BatchPayload!
  upsertTreasurySpendProposal(where: TreasurySpendProposalWhereUniqueInput!, create: TreasurySpendProposalCreateInput!, update: TreasurySpendProposalUpdateInput!): TreasurySpendProposal!
  deleteTreasurySpendProposal(where: TreasurySpendProposalWhereUniqueInput!): TreasurySpendProposal
  deleteManyTreasurySpendProposals(where: TreasurySpendProposalWhereInput): BatchPayload!
  createTreasuryStatus(data: TreasuryStatusCreateInput!): TreasuryStatus!
  updateTreasuryStatus(data: TreasuryStatusUpdateInput!, where: TreasuryStatusWhereUniqueInput!): TreasuryStatus
  updateManyTreasuryStatuses(data: TreasuryStatusUpdateManyMutationInput!, where: TreasuryStatusWhereInput): BatchPayload!
  upsertTreasuryStatus(where: TreasuryStatusWhereUniqueInput!, create: TreasuryStatusCreateInput!, update: TreasuryStatusUpdateInput!): TreasuryStatus!
  deleteTreasuryStatus(where: TreasuryStatusWhereUniqueInput!): TreasuryStatus
  deleteManyTreasuryStatuses(where: TreasuryStatusWhereInput): BatchPayload!
  createValidator(data: ValidatorCreateInput!): Validator!
  updateValidator(data: ValidatorUpdateInput!, where: ValidatorWhereUniqueInput!): Validator
  updateManyValidators(data: ValidatorUpdateManyMutationInput!, where: ValidatorWhereInput): BatchPayload!
  upsertValidator(where: ValidatorWhereUniqueInput!, create: ValidatorCreateInput!, update: ValidatorUpdateInput!): Validator!
  deleteValidator(where: ValidatorWhereUniqueInput!): Validator
  deleteManyValidators(where: ValidatorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Nomination {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  session: Session!
  stakedAmount: String!
}

type NominationConnection {
  pageInfo: PageInfo!
  edges: [NominationEdge]!
  aggregate: AggregateNomination!
}

input NominationCreateInput {
  id: ID
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  session: SessionCreateOneInput!
  stakedAmount: String!
}

type NominationEdge {
  node: Nomination!
  cursor: String!
}

enum NominationOrderByInput {
  id_ASC
  id_DESC
  validatorController_ASC
  validatorController_DESC
  validatorStash_ASC
  validatorStash_DESC
  nominatorController_ASC
  nominatorController_DESC
  nominatorStash_ASC
  nominatorStash_DESC
  stakedAmount_ASC
  stakedAmount_DESC
}

type NominationPreviousValues {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  stakedAmount: String!
}

type NominationSubscriptionPayload {
  mutation: MutationType!
  node: Nomination
  updatedFields: [String!]
  previousValues: NominationPreviousValues
}

input NominationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NominationWhereInput
  AND: [NominationSubscriptionWhereInput!]
  OR: [NominationSubscriptionWhereInput!]
  NOT: [NominationSubscriptionWhereInput!]
}

input NominationUpdateInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  session: SessionUpdateOneRequiredInput
  stakedAmount: String
}

input NominationUpdateManyMutationInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  stakedAmount: String
}

input NominationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  validatorController: String
  validatorController_not: String
  validatorController_in: [String!]
  validatorController_not_in: [String!]
  validatorController_lt: String
  validatorController_lte: String
  validatorController_gt: String
  validatorController_gte: String
  validatorController_contains: String
  validatorController_not_contains: String
  validatorController_starts_with: String
  validatorController_not_starts_with: String
  validatorController_ends_with: String
  validatorController_not_ends_with: String
  validatorStash: String
  validatorStash_not: String
  validatorStash_in: [String!]
  validatorStash_not_in: [String!]
  validatorStash_lt: String
  validatorStash_lte: String
  validatorStash_gt: String
  validatorStash_gte: String
  validatorStash_contains: String
  validatorStash_not_contains: String
  validatorStash_starts_with: String
  validatorStash_not_starts_with: String
  validatorStash_ends_with: String
  validatorStash_not_ends_with: String
  nominatorController: String
  nominatorController_not: String
  nominatorController_in: [String!]
  nominatorController_not_in: [String!]
  nominatorController_lt: String
  nominatorController_lte: String
  nominatorController_gt: String
  nominatorController_gte: String
  nominatorController_contains: String
  nominatorController_not_contains: String
  nominatorController_starts_with: String
  nominatorController_not_starts_with: String
  nominatorController_ends_with: String
  nominatorController_not_ends_with: String
  nominatorStash: String
  nominatorStash_not: String
  nominatorStash_in: [String!]
  nominatorStash_not_in: [String!]
  nominatorStash_lt: String
  nominatorStash_lte: String
  nominatorStash_gt: String
  nominatorStash_gte: String
  nominatorStash_contains: String
  nominatorStash_not_contains: String
  nominatorStash_starts_with: String
  nominatorStash_not_starts_with: String
  nominatorStash_ends_with: String
  nominatorStash_not_ends_with: String
  session: SessionWhereInput
  stakedAmount: String
  stakedAmount_not: String
  stakedAmount_in: [String!]
  stakedAmount_not_in: [String!]
  stakedAmount_lt: String
  stakedAmount_lte: String
  stakedAmount_gt: String
  stakedAmount_gte: String
  stakedAmount_contains: String
  stakedAmount_not_contains: String
  stakedAmount_starts_with: String
  stakedAmount_not_starts_with: String
  stakedAmount_ends_with: String
  stakedAmount_not_ends_with: String
  AND: [NominationWhereInput!]
  OR: [NominationWhereInput!]
  NOT: [NominationWhereInput!]
}

input NominationWhereUniqueInput {
  id: ID
}

type OfflineValidator {
  id: ID!
  sessionIndex: Session!
  validatorId: String!
  total: String!
  own: String!
  others: [Json!]!
}

type OfflineValidatorConnection {
  pageInfo: PageInfo!
  edges: [OfflineValidatorEdge]!
  aggregate: AggregateOfflineValidator!
}

input OfflineValidatorCreateInput {
  id: ID
  sessionIndex: SessionCreateOneInput!
  validatorId: String!
  total: String!
  own: String!
  others: OfflineValidatorCreateothersInput
}

input OfflineValidatorCreateothersInput {
  set: [Json!]
}

type OfflineValidatorEdge {
  node: OfflineValidator!
  cursor: String!
}

enum OfflineValidatorOrderByInput {
  id_ASC
  id_DESC
  validatorId_ASC
  validatorId_DESC
  total_ASC
  total_DESC
  own_ASC
  own_DESC
}

type OfflineValidatorPreviousValues {
  id: ID!
  validatorId: String!
  total: String!
  own: String!
  others: [Json!]!
}

type OfflineValidatorSubscriptionPayload {
  mutation: MutationType!
  node: OfflineValidator
  updatedFields: [String!]
  previousValues: OfflineValidatorPreviousValues
}

input OfflineValidatorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OfflineValidatorWhereInput
  AND: [OfflineValidatorSubscriptionWhereInput!]
  OR: [OfflineValidatorSubscriptionWhereInput!]
  NOT: [OfflineValidatorSubscriptionWhereInput!]
}

input OfflineValidatorUpdateInput {
  sessionIndex: SessionUpdateOneRequiredInput
  validatorId: String
  total: String
  own: String
  others: OfflineValidatorUpdateothersInput
}

input OfflineValidatorUpdateManyMutationInput {
  validatorId: String
  total: String
  own: String
  others: OfflineValidatorUpdateothersInput
}

input OfflineValidatorUpdateothersInput {
  set: [Json!]
}

input OfflineValidatorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sessionIndex: SessionWhereInput
  validatorId: String
  validatorId_not: String
  validatorId_in: [String!]
  validatorId_not_in: [String!]
  validatorId_lt: String
  validatorId_lte: String
  validatorId_gt: String
  validatorId_gte: String
  validatorId_contains: String
  validatorId_not_contains: String
  validatorId_starts_with: String
  validatorId_not_starts_with: String
  validatorId_ends_with: String
  validatorId_not_ends_with: String
  total: String
  total_not: String
  total_in: [String!]
  total_not_in: [String!]
  total_lt: String
  total_lte: String
  total_gt: String
  total_gte: String
  total_contains: String
  total_not_contains: String
  total_starts_with: String
  total_not_starts_with: String
  total_ends_with: String
  total_not_ends_with: String
  own: String
  own_not: String
  own_in: [String!]
  own_not_in: [String!]
  own_lt: String
  own_lte: String
  own_gt: String
  own_gte: String
  own_contains: String
  own_not_contains: String
  own_starts_with: String
  own_not_starts_with: String
  own_ends_with: String
  own_not_ends_with: String
  AND: [OfflineValidatorWhereInput!]
  OR: [OfflineValidatorWhereInput!]
  NOT: [OfflineValidatorWhereInput!]
}

input OfflineValidatorWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Preimage {
  id: ID!
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: Motion
  proposal: Proposal
  preimageArguments(where: PreimageArgumentWhereInput, orderBy: PreimageArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageArgument!]
  preimageStatus(where: PreimageStatusWhereInput, orderBy: PreimageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageStatus!]
  referendum: Referendum
  section: String!
}

type PreimageArgument {
  id: ID!
  name: String!
  preimage: Preimage!
  value: String!
}

type PreimageArgumentConnection {
  pageInfo: PageInfo!
  edges: [PreimageArgumentEdge]!
  aggregate: AggregatePreimageArgument!
}

input PreimageArgumentCreateInput {
  id: ID
  name: String!
  preimage: PreimageCreateOneWithoutPreimageArgumentsInput!
  value: String!
}

input PreimageArgumentCreateManyWithoutPreimageInput {
  create: [PreimageArgumentCreateWithoutPreimageInput!]
  connect: [PreimageArgumentWhereUniqueInput!]
}

input PreimageArgumentCreateWithoutPreimageInput {
  id: ID
  name: String!
  value: String!
}

type PreimageArgumentEdge {
  node: PreimageArgument!
  cursor: String!
}

enum PreimageArgumentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
}

type PreimageArgumentPreviousValues {
  id: ID!
  name: String!
  value: String!
}

input PreimageArgumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [PreimageArgumentScalarWhereInput!]
  OR: [PreimageArgumentScalarWhereInput!]
  NOT: [PreimageArgumentScalarWhereInput!]
}

type PreimageArgumentSubscriptionPayload {
  mutation: MutationType!
  node: PreimageArgument
  updatedFields: [String!]
  previousValues: PreimageArgumentPreviousValues
}

input PreimageArgumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PreimageArgumentWhereInput
  AND: [PreimageArgumentSubscriptionWhereInput!]
  OR: [PreimageArgumentSubscriptionWhereInput!]
  NOT: [PreimageArgumentSubscriptionWhereInput!]
}

input PreimageArgumentUpdateInput {
  name: String
  preimage: PreimageUpdateOneRequiredWithoutPreimageArgumentsInput
  value: String
}

input PreimageArgumentUpdateManyDataInput {
  name: String
  value: String
}

input PreimageArgumentUpdateManyMutationInput {
  name: String
  value: String
}

input PreimageArgumentUpdateManyWithoutPreimageInput {
  create: [PreimageArgumentCreateWithoutPreimageInput!]
  delete: [PreimageArgumentWhereUniqueInput!]
  connect: [PreimageArgumentWhereUniqueInput!]
  set: [PreimageArgumentWhereUniqueInput!]
  disconnect: [PreimageArgumentWhereUniqueInput!]
  update: [PreimageArgumentUpdateWithWhereUniqueWithoutPreimageInput!]
  upsert: [PreimageArgumentUpsertWithWhereUniqueWithoutPreimageInput!]
  deleteMany: [PreimageArgumentScalarWhereInput!]
  updateMany: [PreimageArgumentUpdateManyWithWhereNestedInput!]
}

input PreimageArgumentUpdateManyWithWhereNestedInput {
  where: PreimageArgumentScalarWhereInput!
  data: PreimageArgumentUpdateManyDataInput!
}

input PreimageArgumentUpdateWithoutPreimageDataInput {
  name: String
  value: String
}

input PreimageArgumentUpdateWithWhereUniqueWithoutPreimageInput {
  where: PreimageArgumentWhereUniqueInput!
  data: PreimageArgumentUpdateWithoutPreimageDataInput!
}

input PreimageArgumentUpsertWithWhereUniqueWithoutPreimageInput {
  where: PreimageArgumentWhereUniqueInput!
  update: PreimageArgumentUpdateWithoutPreimageDataInput!
  create: PreimageArgumentCreateWithoutPreimageInput!
}

input PreimageArgumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  preimage: PreimageWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [PreimageArgumentWhereInput!]
  OR: [PreimageArgumentWhereInput!]
  NOT: [PreimageArgumentWhereInput!]
}

input PreimageArgumentWhereUniqueInput {
  id: ID
}

type PreimageConnection {
  pageInfo: PageInfo!
  edges: [PreimageEdge]!
  aggregate: AggregatePreimage!
}

input PreimageCreateInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: MotionCreateOneWithoutPreimageInput
  proposal: ProposalCreateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentCreateManyWithoutPreimageInput
  preimageStatus: PreimageStatusCreateManyWithoutPreimageInput
  referendum: ReferendumCreateOneWithoutPreimageInput
  section: String!
}

input PreimageCreateOneWithoutMotionInput {
  create: PreimageCreateWithoutMotionInput
  connect: PreimageWhereUniqueInput
}

input PreimageCreateOneWithoutPreimageArgumentsInput {
  create: PreimageCreateWithoutPreimageArgumentsInput
  connect: PreimageWhereUniqueInput
}

input PreimageCreateOneWithoutPreimageStatusInput {
  create: PreimageCreateWithoutPreimageStatusInput
  connect: PreimageWhereUniqueInput
}

input PreimageCreateOneWithoutProposalInput {
  create: PreimageCreateWithoutProposalInput
  connect: PreimageWhereUniqueInput
}

input PreimageCreateOneWithoutReferendumInput {
  create: PreimageCreateWithoutReferendumInput
  connect: PreimageWhereUniqueInput
}

input PreimageCreateWithoutMotionInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  proposal: ProposalCreateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentCreateManyWithoutPreimageInput
  preimageStatus: PreimageStatusCreateManyWithoutPreimageInput
  referendum: ReferendumCreateOneWithoutPreimageInput
  section: String!
}

input PreimageCreateWithoutPreimageArgumentsInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: MotionCreateOneWithoutPreimageInput
  proposal: ProposalCreateOneWithoutPreimageInput
  preimageStatus: PreimageStatusCreateManyWithoutPreimageInput
  referendum: ReferendumCreateOneWithoutPreimageInput
  section: String!
}

input PreimageCreateWithoutPreimageStatusInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: MotionCreateOneWithoutPreimageInput
  proposal: ProposalCreateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentCreateManyWithoutPreimageInput
  referendum: ReferendumCreateOneWithoutPreimageInput
  section: String!
}

input PreimageCreateWithoutProposalInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: MotionCreateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentCreateManyWithoutPreimageInput
  preimageStatus: PreimageStatusCreateManyWithoutPreimageInput
  referendum: ReferendumCreateOneWithoutPreimageInput
  section: String!
}

input PreimageCreateWithoutReferendumInput {
  id: ID
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  motion: MotionCreateOneWithoutPreimageInput
  proposal: ProposalCreateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentCreateManyWithoutPreimageInput
  preimageStatus: PreimageStatusCreateManyWithoutPreimageInput
  section: String!
}

type PreimageEdge {
  node: Preimage!
  cursor: String!
}

enum PreimageOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  depositAmount_ASC
  depositAmount_DESC
  hash_ASC
  hash_DESC
  metaDescription_ASC
  metaDescription_DESC
  method_ASC
  method_DESC
  section_ASC
  section_DESC
}

type PreimagePreviousValues {
  id: ID!
  author: String!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  section: String!
}

type PreimageStatus {
  id: ID!
  blockNumber: BlockNumber!
  preimage: Preimage!
  status: String!
}

type PreimageStatusConnection {
  pageInfo: PageInfo!
  edges: [PreimageStatusEdge]!
  aggregate: AggregatePreimageStatus!
}

input PreimageStatusCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  preimage: PreimageCreateOneWithoutPreimageStatusInput!
  status: String!
}

input PreimageStatusCreateManyWithoutPreimageInput {
  create: [PreimageStatusCreateWithoutPreimageInput!]
  connect: [PreimageStatusWhereUniqueInput!]
}

input PreimageStatusCreateWithoutPreimageInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  status: String!
}

type PreimageStatusEdge {
  node: PreimageStatus!
  cursor: String!
}

enum PreimageStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

type PreimageStatusPreviousValues {
  id: ID!
  status: String!
}

input PreimageStatusScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [PreimageStatusScalarWhereInput!]
  OR: [PreimageStatusScalarWhereInput!]
  NOT: [PreimageStatusScalarWhereInput!]
}

type PreimageStatusSubscriptionPayload {
  mutation: MutationType!
  node: PreimageStatus
  updatedFields: [String!]
  previousValues: PreimageStatusPreviousValues
}

input PreimageStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PreimageStatusWhereInput
  AND: [PreimageStatusSubscriptionWhereInput!]
  OR: [PreimageStatusSubscriptionWhereInput!]
  NOT: [PreimageStatusSubscriptionWhereInput!]
}

input PreimageStatusUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  preimage: PreimageUpdateOneRequiredWithoutPreimageStatusInput
  status: String
}

input PreimageStatusUpdateManyDataInput {
  status: String
}

input PreimageStatusUpdateManyMutationInput {
  status: String
}

input PreimageStatusUpdateManyWithoutPreimageInput {
  create: [PreimageStatusCreateWithoutPreimageInput!]
  delete: [PreimageStatusWhereUniqueInput!]
  connect: [PreimageStatusWhereUniqueInput!]
  set: [PreimageStatusWhereUniqueInput!]
  disconnect: [PreimageStatusWhereUniqueInput!]
  update: [PreimageStatusUpdateWithWhereUniqueWithoutPreimageInput!]
  upsert: [PreimageStatusUpsertWithWhereUniqueWithoutPreimageInput!]
  deleteMany: [PreimageStatusScalarWhereInput!]
  updateMany: [PreimageStatusUpdateManyWithWhereNestedInput!]
}

input PreimageStatusUpdateManyWithWhereNestedInput {
  where: PreimageStatusScalarWhereInput!
  data: PreimageStatusUpdateManyDataInput!
}

input PreimageStatusUpdateWithoutPreimageDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  status: String
}

input PreimageStatusUpdateWithWhereUniqueWithoutPreimageInput {
  where: PreimageStatusWhereUniqueInput!
  data: PreimageStatusUpdateWithoutPreimageDataInput!
}

input PreimageStatusUpsertWithWhereUniqueWithoutPreimageInput {
  where: PreimageStatusWhereUniqueInput!
  update: PreimageStatusUpdateWithoutPreimageDataInput!
  create: PreimageStatusCreateWithoutPreimageInput!
}

input PreimageStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  preimage: PreimageWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [PreimageStatusWhereInput!]
  OR: [PreimageStatusWhereInput!]
  NOT: [PreimageStatusWhereInput!]
}

input PreimageStatusWhereUniqueInput {
  id: ID
}

type PreimageSubscriptionPayload {
  mutation: MutationType!
  node: Preimage
  updatedFields: [String!]
  previousValues: PreimagePreviousValues
}

input PreimageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PreimageWhereInput
  AND: [PreimageSubscriptionWhereInput!]
  OR: [PreimageSubscriptionWhereInput!]
  NOT: [PreimageSubscriptionWhereInput!]
}

input PreimageUpdateInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  motion: MotionUpdateOneWithoutPreimageInput
  proposal: ProposalUpdateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentUpdateManyWithoutPreimageInput
  preimageStatus: PreimageStatusUpdateManyWithoutPreimageInput
  referendum: ReferendumUpdateOneWithoutPreimageInput
  section: String
}

input PreimageUpdateManyMutationInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  section: String
}

input PreimageUpdateOneRequiredWithoutPreimageArgumentsInput {
  create: PreimageCreateWithoutPreimageArgumentsInput
  update: PreimageUpdateWithoutPreimageArgumentsDataInput
  upsert: PreimageUpsertWithoutPreimageArgumentsInput
  connect: PreimageWhereUniqueInput
}

input PreimageUpdateOneRequiredWithoutPreimageStatusInput {
  create: PreimageCreateWithoutPreimageStatusInput
  update: PreimageUpdateWithoutPreimageStatusDataInput
  upsert: PreimageUpsertWithoutPreimageStatusInput
  connect: PreimageWhereUniqueInput
}

input PreimageUpdateOneWithoutMotionInput {
  create: PreimageCreateWithoutMotionInput
  update: PreimageUpdateWithoutMotionDataInput
  upsert: PreimageUpsertWithoutMotionInput
  delete: Boolean
  disconnect: Boolean
  connect: PreimageWhereUniqueInput
}

input PreimageUpdateOneWithoutProposalInput {
  create: PreimageCreateWithoutProposalInput
  update: PreimageUpdateWithoutProposalDataInput
  upsert: PreimageUpsertWithoutProposalInput
  delete: Boolean
  disconnect: Boolean
  connect: PreimageWhereUniqueInput
}

input PreimageUpdateOneWithoutReferendumInput {
  create: PreimageCreateWithoutReferendumInput
  update: PreimageUpdateWithoutReferendumDataInput
  upsert: PreimageUpsertWithoutReferendumInput
  delete: Boolean
  disconnect: Boolean
  connect: PreimageWhereUniqueInput
}

input PreimageUpdateWithoutMotionDataInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  proposal: ProposalUpdateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentUpdateManyWithoutPreimageInput
  preimageStatus: PreimageStatusUpdateManyWithoutPreimageInput
  referendum: ReferendumUpdateOneWithoutPreimageInput
  section: String
}

input PreimageUpdateWithoutPreimageArgumentsDataInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  motion: MotionUpdateOneWithoutPreimageInput
  proposal: ProposalUpdateOneWithoutPreimageInput
  preimageStatus: PreimageStatusUpdateManyWithoutPreimageInput
  referendum: ReferendumUpdateOneWithoutPreimageInput
  section: String
}

input PreimageUpdateWithoutPreimageStatusDataInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  motion: MotionUpdateOneWithoutPreimageInput
  proposal: ProposalUpdateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentUpdateManyWithoutPreimageInput
  referendum: ReferendumUpdateOneWithoutPreimageInput
  section: String
}

input PreimageUpdateWithoutProposalDataInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  motion: MotionUpdateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentUpdateManyWithoutPreimageInput
  preimageStatus: PreimageStatusUpdateManyWithoutPreimageInput
  referendum: ReferendumUpdateOneWithoutPreimageInput
  section: String
}

input PreimageUpdateWithoutReferendumDataInput {
  author: String
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  motion: MotionUpdateOneWithoutPreimageInput
  proposal: ProposalUpdateOneWithoutPreimageInput
  preimageArguments: PreimageArgumentUpdateManyWithoutPreimageInput
  preimageStatus: PreimageStatusUpdateManyWithoutPreimageInput
  section: String
}

input PreimageUpsertWithoutMotionInput {
  update: PreimageUpdateWithoutMotionDataInput!
  create: PreimageCreateWithoutMotionInput!
}

input PreimageUpsertWithoutPreimageArgumentsInput {
  update: PreimageUpdateWithoutPreimageArgumentsDataInput!
  create: PreimageCreateWithoutPreimageArgumentsInput!
}

input PreimageUpsertWithoutPreimageStatusInput {
  update: PreimageUpdateWithoutPreimageStatusDataInput!
  create: PreimageCreateWithoutPreimageStatusInput!
}

input PreimageUpsertWithoutProposalInput {
  update: PreimageUpdateWithoutProposalDataInput!
  create: PreimageCreateWithoutProposalInput!
}

input PreimageUpsertWithoutReferendumInput {
  update: PreimageUpdateWithoutReferendumDataInput!
  create: PreimageCreateWithoutReferendumInput!
}

input PreimageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  depositAmount: String
  depositAmount_not: String
  depositAmount_in: [String!]
  depositAmount_not_in: [String!]
  depositAmount_lt: String
  depositAmount_lte: String
  depositAmount_gt: String
  depositAmount_gte: String
  depositAmount_contains: String
  depositAmount_not_contains: String
  depositAmount_starts_with: String
  depositAmount_not_starts_with: String
  depositAmount_ends_with: String
  depositAmount_not_ends_with: String
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  metaDescription: String
  metaDescription_not: String
  metaDescription_in: [String!]
  metaDescription_not_in: [String!]
  metaDescription_lt: String
  metaDescription_lte: String
  metaDescription_gt: String
  metaDescription_gte: String
  metaDescription_contains: String
  metaDescription_not_contains: String
  metaDescription_starts_with: String
  metaDescription_not_starts_with: String
  metaDescription_ends_with: String
  metaDescription_not_ends_with: String
  method: String
  method_not: String
  method_in: [String!]
  method_not_in: [String!]
  method_lt: String
  method_lte: String
  method_gt: String
  method_gte: String
  method_contains: String
  method_not_contains: String
  method_starts_with: String
  method_not_starts_with: String
  method_ends_with: String
  method_not_ends_with: String
  motion: MotionWhereInput
  proposal: ProposalWhereInput
  preimageArguments_every: PreimageArgumentWhereInput
  preimageArguments_some: PreimageArgumentWhereInput
  preimageArguments_none: PreimageArgumentWhereInput
  preimageStatus_every: PreimageStatusWhereInput
  preimageStatus_some: PreimageStatusWhereInput
  preimageStatus_none: PreimageStatusWhereInput
  referendum: ReferendumWhereInput
  section: String
  section_not: String
  section_in: [String!]
  section_not_in: [String!]
  section_lt: String
  section_lte: String
  section_gt: String
  section_gte: String
  section_contains: String
  section_not_contains: String
  section_starts_with: String
  section_not_starts_with: String
  section_ends_with: String
  section_not_ends_with: String
  AND: [PreimageWhereInput!]
  OR: [PreimageWhereInput!]
  NOT: [PreimageWhereInput!]
}

input PreimageWhereUniqueInput {
  id: ID
}

type Proposal {
  id: Int!
  author: String!
  depositAmount: String!
  preimage: Preimage
  preimageHash: String!
  proposalId: Int!
  proposalStatus(where: ProposalStatusWhereInput, orderBy: ProposalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalStatus!]
}

type ProposalConnection {
  pageInfo: PageInfo!
  edges: [ProposalEdge]!
  aggregate: AggregateProposal!
}

input ProposalCreateInput {
  author: String!
  depositAmount: String!
  preimage: PreimageCreateOneWithoutProposalInput
  preimageHash: String!
  proposalId: Int!
  proposalStatus: ProposalStatusCreateManyWithoutProposalInput
}

input ProposalCreateOneWithoutPreimageInput {
  create: ProposalCreateWithoutPreimageInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateOneWithoutProposalStatusInput {
  create: ProposalCreateWithoutProposalStatusInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateWithoutPreimageInput {
  author: String!
  depositAmount: String!
  preimageHash: String!
  proposalId: Int!
  proposalStatus: ProposalStatusCreateManyWithoutProposalInput
}

input ProposalCreateWithoutProposalStatusInput {
  author: String!
  depositAmount: String!
  preimage: PreimageCreateOneWithoutProposalInput
  preimageHash: String!
  proposalId: Int!
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

enum ProposalOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  depositAmount_ASC
  depositAmount_DESC
  preimageHash_ASC
  preimageHash_DESC
  proposalId_ASC
  proposalId_DESC
}

type ProposalPreviousValues {
  id: Int!
  author: String!
  depositAmount: String!
  preimageHash: String!
  proposalId: Int!
}

type ProposalStatus {
  id: ID!
  blockNumber: BlockNumber!
  proposal: Proposal!
  status: String!
  uniqueStatus: String!
}

type ProposalStatusConnection {
  pageInfo: PageInfo!
  edges: [ProposalStatusEdge]!
  aggregate: AggregateProposalStatus!
}

input ProposalStatusCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  proposal: ProposalCreateOneWithoutProposalStatusInput!
  status: String!
  uniqueStatus: String!
}

input ProposalStatusCreateManyWithoutProposalInput {
  create: [ProposalStatusCreateWithoutProposalInput!]
  connect: [ProposalStatusWhereUniqueInput!]
}

input ProposalStatusCreateWithoutProposalInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  status: String!
  uniqueStatus: String!
}

type ProposalStatusEdge {
  node: ProposalStatus!
  cursor: String!
}

enum ProposalStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  uniqueStatus_ASC
  uniqueStatus_DESC
}

type ProposalStatusPreviousValues {
  id: ID!
  status: String!
  uniqueStatus: String!
}

input ProposalStatusScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [ProposalStatusScalarWhereInput!]
  OR: [ProposalStatusScalarWhereInput!]
  NOT: [ProposalStatusScalarWhereInput!]
}

type ProposalStatusSubscriptionPayload {
  mutation: MutationType!
  node: ProposalStatus
  updatedFields: [String!]
  previousValues: ProposalStatusPreviousValues
}

input ProposalStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalStatusWhereInput
  AND: [ProposalStatusSubscriptionWhereInput!]
  OR: [ProposalStatusSubscriptionWhereInput!]
  NOT: [ProposalStatusSubscriptionWhereInput!]
}

input ProposalStatusUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  proposal: ProposalUpdateOneRequiredWithoutProposalStatusInput
  status: String
  uniqueStatus: String
}

input ProposalStatusUpdateManyDataInput {
  status: String
  uniqueStatus: String
}

input ProposalStatusUpdateManyMutationInput {
  status: String
  uniqueStatus: String
}

input ProposalStatusUpdateManyWithoutProposalInput {
  create: [ProposalStatusCreateWithoutProposalInput!]
  delete: [ProposalStatusWhereUniqueInput!]
  connect: [ProposalStatusWhereUniqueInput!]
  set: [ProposalStatusWhereUniqueInput!]
  disconnect: [ProposalStatusWhereUniqueInput!]
  update: [ProposalStatusUpdateWithWhereUniqueWithoutProposalInput!]
  upsert: [ProposalStatusUpsertWithWhereUniqueWithoutProposalInput!]
  deleteMany: [ProposalStatusScalarWhereInput!]
  updateMany: [ProposalStatusUpdateManyWithWhereNestedInput!]
}

input ProposalStatusUpdateManyWithWhereNestedInput {
  where: ProposalStatusScalarWhereInput!
  data: ProposalStatusUpdateManyDataInput!
}

input ProposalStatusUpdateWithoutProposalDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  status: String
  uniqueStatus: String
}

input ProposalStatusUpdateWithWhereUniqueWithoutProposalInput {
  where: ProposalStatusWhereUniqueInput!
  data: ProposalStatusUpdateWithoutProposalDataInput!
}

input ProposalStatusUpsertWithWhereUniqueWithoutProposalInput {
  where: ProposalStatusWhereUniqueInput!
  update: ProposalStatusUpdateWithoutProposalDataInput!
  create: ProposalStatusCreateWithoutProposalInput!
}

input ProposalStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  proposal: ProposalWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [ProposalStatusWhereInput!]
  OR: [ProposalStatusWhereInput!]
  NOT: [ProposalStatusWhereInput!]
}

input ProposalStatusWhereUniqueInput {
  id: ID
  uniqueStatus: String
}

type ProposalSubscriptionPayload {
  mutation: MutationType!
  node: Proposal
  updatedFields: [String!]
  previousValues: ProposalPreviousValues
}

input ProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalWhereInput
  AND: [ProposalSubscriptionWhereInput!]
  OR: [ProposalSubscriptionWhereInput!]
  NOT: [ProposalSubscriptionWhereInput!]
}

input ProposalUpdateInput {
  author: String
  depositAmount: String
  preimage: PreimageUpdateOneWithoutProposalInput
  preimageHash: String
  proposalId: Int
  proposalStatus: ProposalStatusUpdateManyWithoutProposalInput
}

input ProposalUpdateManyMutationInput {
  author: String
  depositAmount: String
  preimageHash: String
  proposalId: Int
}

input ProposalUpdateOneRequiredWithoutProposalStatusInput {
  create: ProposalCreateWithoutProposalStatusInput
  update: ProposalUpdateWithoutProposalStatusDataInput
  upsert: ProposalUpsertWithoutProposalStatusInput
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateOneWithoutPreimageInput {
  create: ProposalCreateWithoutPreimageInput
  update: ProposalUpdateWithoutPreimageDataInput
  upsert: ProposalUpsertWithoutPreimageInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateWithoutPreimageDataInput {
  author: String
  depositAmount: String
  preimageHash: String
  proposalId: Int
  proposalStatus: ProposalStatusUpdateManyWithoutProposalInput
}

input ProposalUpdateWithoutProposalStatusDataInput {
  author: String
  depositAmount: String
  preimage: PreimageUpdateOneWithoutProposalInput
  preimageHash: String
  proposalId: Int
}

input ProposalUpsertWithoutPreimageInput {
  update: ProposalUpdateWithoutPreimageDataInput!
  create: ProposalCreateWithoutPreimageInput!
}

input ProposalUpsertWithoutProposalStatusInput {
  update: ProposalUpdateWithoutProposalStatusDataInput!
  create: ProposalCreateWithoutProposalStatusInput!
}

input ProposalWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  depositAmount: String
  depositAmount_not: String
  depositAmount_in: [String!]
  depositAmount_not_in: [String!]
  depositAmount_lt: String
  depositAmount_lte: String
  depositAmount_gt: String
  depositAmount_gte: String
  depositAmount_contains: String
  depositAmount_not_contains: String
  depositAmount_starts_with: String
  depositAmount_not_starts_with: String
  depositAmount_ends_with: String
  depositAmount_not_ends_with: String
  preimage: PreimageWhereInput
  preimageHash: String
  preimageHash_not: String
  preimageHash_in: [String!]
  preimageHash_not_in: [String!]
  preimageHash_lt: String
  preimageHash_lte: String
  preimageHash_gt: String
  preimageHash_gte: String
  preimageHash_contains: String
  preimageHash_not_contains: String
  preimageHash_starts_with: String
  preimageHash_not_starts_with: String
  preimageHash_ends_with: String
  preimageHash_not_ends_with: String
  proposalId: Int
  proposalId_not: Int
  proposalId_in: [Int!]
  proposalId_not_in: [Int!]
  proposalId_lt: Int
  proposalId_lte: Int
  proposalId_gt: Int
  proposalId_gte: Int
  proposalStatus_every: ProposalStatusWhereInput
  proposalStatus_some: ProposalStatusWhereInput
  proposalStatus_none: ProposalStatusWhereInput
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  NOT: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: Int
  proposalId: Int
}

type Query {
  blockIndex(where: BlockIndexWhereUniqueInput!): BlockIndex
  blockIndexes(where: BlockIndexWhereInput, orderBy: BlockIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockIndex]!
  blockIndexesConnection(where: BlockIndexWhereInput, orderBy: BlockIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockIndexConnection!
  blockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  blockNumbers(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockNumber]!
  blockNumbersConnection(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockNumberConnection!
  council(where: CouncilWhereUniqueInput!): Council
  councils(where: CouncilWhereInput, orderBy: CouncilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Council]!
  councilsConnection(where: CouncilWhereInput, orderBy: CouncilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CouncilConnection!
  councilMember(where: CouncilMemberWhereUniqueInput!): CouncilMember
  councilMembers(where: CouncilMemberWhereInput, orderBy: CouncilMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CouncilMember]!
  councilMembersConnection(where: CouncilMemberWhereInput, orderBy: CouncilMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CouncilMemberConnection!
  era(where: EraWhereUniqueInput!): Era
  eras(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Era]!
  erasConnection(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EraConnection!
  heartBeat(where: HeartBeatWhereUniqueInput!): HeartBeat
  heartBeats(where: HeartBeatWhereInput, orderBy: HeartBeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HeartBeat]!
  heartBeatsConnection(where: HeartBeatWhereInput, orderBy: HeartBeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeartBeatConnection!
  motion(where: MotionWhereUniqueInput!): Motion
  motions(where: MotionWhereInput, orderBy: MotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Motion]!
  motionsConnection(where: MotionWhereInput, orderBy: MotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MotionConnection!
  motionProposalArgument(where: MotionProposalArgumentWhereUniqueInput!): MotionProposalArgument
  motionProposalArguments(where: MotionProposalArgumentWhereInput, orderBy: MotionProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionProposalArgument]!
  motionProposalArgumentsConnection(where: MotionProposalArgumentWhereInput, orderBy: MotionProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MotionProposalArgumentConnection!
  motionStatus(where: MotionStatusWhereUniqueInput!): MotionStatus
  motionStatuses(where: MotionStatusWhereInput, orderBy: MotionStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MotionStatus]!
  motionStatusesConnection(where: MotionStatusWhereInput, orderBy: MotionStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MotionStatusConnection!
  nomination(where: NominationWhereUniqueInput!): Nomination
  nominations(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nomination]!
  nominationsConnection(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NominationConnection!
  offlineValidator(where: OfflineValidatorWhereUniqueInput!): OfflineValidator
  offlineValidators(where: OfflineValidatorWhereInput, orderBy: OfflineValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OfflineValidator]!
  offlineValidatorsConnection(where: OfflineValidatorWhereInput, orderBy: OfflineValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfflineValidatorConnection!
  preimage(where: PreimageWhereUniqueInput!): Preimage
  preimages(where: PreimageWhereInput, orderBy: PreimageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preimage]!
  preimagesConnection(where: PreimageWhereInput, orderBy: PreimageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreimageConnection!
  preimageArgument(where: PreimageArgumentWhereUniqueInput!): PreimageArgument
  preimageArguments(where: PreimageArgumentWhereInput, orderBy: PreimageArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageArgument]!
  preimageArgumentsConnection(where: PreimageArgumentWhereInput, orderBy: PreimageArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreimageArgumentConnection!
  preimageStatus(where: PreimageStatusWhereUniqueInput!): PreimageStatus
  preimageStatuses(where: PreimageStatusWhereInput, orderBy: PreimageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreimageStatus]!
  preimageStatusesConnection(where: PreimageStatusWhereInput, orderBy: PreimageStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreimageStatusConnection!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  proposalsConnection(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalConnection!
  proposalStatus(where: ProposalStatusWhereUniqueInput!): ProposalStatus
  proposalStatuses(where: ProposalStatusWhereInput, orderBy: ProposalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalStatus]!
  proposalStatusesConnection(where: ProposalStatusWhereInput, orderBy: ProposalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalStatusConnection!
  referendum(where: ReferendumWhereUniqueInput!): Referendum
  referendums(where: ReferendumWhereInput, orderBy: ReferendumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Referendum]!
  referendumsConnection(where: ReferendumWhereInput, orderBy: ReferendumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReferendumConnection!
  referendumStatus(where: ReferendumStatusWhereUniqueInput!): ReferendumStatus
  referendumStatuses(where: ReferendumStatusWhereInput, orderBy: ReferendumStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReferendumStatus]!
  referendumStatusesConnection(where: ReferendumStatusWhereInput, orderBy: ReferendumStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReferendumStatusConnection!
  reward(where: RewardWhereUniqueInput!): Reward
  rewards(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reward]!
  rewardsConnection(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RewardConnection!
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  slashing(where: SlashingWhereUniqueInput!): Slashing
  slashings(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slashing]!
  slashingsConnection(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SlashingConnection!
  stake(where: StakeWhereUniqueInput!): Stake
  stakes(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stake]!
  stakesConnection(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StakeConnection!
  totalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  totalIssuances(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TotalIssuance]!
  totalIssuancesConnection(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TotalIssuanceConnection!
  treasurySpendProposal(where: TreasurySpendProposalWhereUniqueInput!): TreasurySpendProposal
  treasurySpendProposals(where: TreasurySpendProposalWhereInput, orderBy: TreasurySpendProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TreasurySpendProposal]!
  treasurySpendProposalsConnection(where: TreasurySpendProposalWhereInput, orderBy: TreasurySpendProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TreasurySpendProposalConnection!
  treasuryStatus(where: TreasuryStatusWhereUniqueInput!): TreasuryStatus
  treasuryStatuses(where: TreasuryStatusWhereInput, orderBy: TreasuryStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TreasuryStatus]!
  treasuryStatusesConnection(where: TreasuryStatusWhereInput, orderBy: TreasuryStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TreasuryStatusConnection!
  validator(where: ValidatorWhereUniqueInput!): Validator
  validators(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Validator]!
  validatorsConnection(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValidatorConnection!
  node(id: ID!): Node
}

type Referendum {
  id: Int!
  delay: Int!
  end: Int!
  preimage: Preimage
  preimageHash: String!
  referendumId: Int!
  referendumStatus(where: ReferendumStatusWhereInput, orderBy: ReferendumStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReferendumStatus!]
  voteThreshold: String!
}

type ReferendumConnection {
  pageInfo: PageInfo!
  edges: [ReferendumEdge]!
  aggregate: AggregateReferendum!
}

input ReferendumCreateInput {
  delay: Int!
  end: Int!
  preimage: PreimageCreateOneWithoutReferendumInput
  preimageHash: String!
  referendumId: Int!
  referendumStatus: ReferendumStatusCreateManyWithoutReferendumInput
  voteThreshold: String!
}

input ReferendumCreateOneWithoutPreimageInput {
  create: ReferendumCreateWithoutPreimageInput
  connect: ReferendumWhereUniqueInput
}

input ReferendumCreateOneWithoutReferendumStatusInput {
  create: ReferendumCreateWithoutReferendumStatusInput
  connect: ReferendumWhereUniqueInput
}

input ReferendumCreateWithoutPreimageInput {
  delay: Int!
  end: Int!
  preimageHash: String!
  referendumId: Int!
  referendumStatus: ReferendumStatusCreateManyWithoutReferendumInput
  voteThreshold: String!
}

input ReferendumCreateWithoutReferendumStatusInput {
  delay: Int!
  end: Int!
  preimage: PreimageCreateOneWithoutReferendumInput
  preimageHash: String!
  referendumId: Int!
  voteThreshold: String!
}

type ReferendumEdge {
  node: Referendum!
  cursor: String!
}

enum ReferendumOrderByInput {
  id_ASC
  id_DESC
  delay_ASC
  delay_DESC
  end_ASC
  end_DESC
  preimageHash_ASC
  preimageHash_DESC
  referendumId_ASC
  referendumId_DESC
  voteThreshold_ASC
  voteThreshold_DESC
}

type ReferendumPreviousValues {
  id: Int!
  delay: Int!
  end: Int!
  preimageHash: String!
  referendumId: Int!
  voteThreshold: String!
}

type ReferendumStatus {
  id: ID!
  blockNumber: BlockNumber!
  referendum: Referendum!
  status: String!
  uniqueStatus: String!
}

type ReferendumStatusConnection {
  pageInfo: PageInfo!
  edges: [ReferendumStatusEdge]!
  aggregate: AggregateReferendumStatus!
}

input ReferendumStatusCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  referendum: ReferendumCreateOneWithoutReferendumStatusInput!
  status: String!
  uniqueStatus: String!
}

input ReferendumStatusCreateManyWithoutReferendumInput {
  create: [ReferendumStatusCreateWithoutReferendumInput!]
  connect: [ReferendumStatusWhereUniqueInput!]
}

input ReferendumStatusCreateWithoutReferendumInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  status: String!
  uniqueStatus: String!
}

type ReferendumStatusEdge {
  node: ReferendumStatus!
  cursor: String!
}

enum ReferendumStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  uniqueStatus_ASC
  uniqueStatus_DESC
}

type ReferendumStatusPreviousValues {
  id: ID!
  status: String!
  uniqueStatus: String!
}

input ReferendumStatusScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [ReferendumStatusScalarWhereInput!]
  OR: [ReferendumStatusScalarWhereInput!]
  NOT: [ReferendumStatusScalarWhereInput!]
}

type ReferendumStatusSubscriptionPayload {
  mutation: MutationType!
  node: ReferendumStatus
  updatedFields: [String!]
  previousValues: ReferendumStatusPreviousValues
}

input ReferendumStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReferendumStatusWhereInput
  AND: [ReferendumStatusSubscriptionWhereInput!]
  OR: [ReferendumStatusSubscriptionWhereInput!]
  NOT: [ReferendumStatusSubscriptionWhereInput!]
}

input ReferendumStatusUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  referendum: ReferendumUpdateOneRequiredWithoutReferendumStatusInput
  status: String
  uniqueStatus: String
}

input ReferendumStatusUpdateManyDataInput {
  status: String
  uniqueStatus: String
}

input ReferendumStatusUpdateManyMutationInput {
  status: String
  uniqueStatus: String
}

input ReferendumStatusUpdateManyWithoutReferendumInput {
  create: [ReferendumStatusCreateWithoutReferendumInput!]
  delete: [ReferendumStatusWhereUniqueInput!]
  connect: [ReferendumStatusWhereUniqueInput!]
  set: [ReferendumStatusWhereUniqueInput!]
  disconnect: [ReferendumStatusWhereUniqueInput!]
  update: [ReferendumStatusUpdateWithWhereUniqueWithoutReferendumInput!]
  upsert: [ReferendumStatusUpsertWithWhereUniqueWithoutReferendumInput!]
  deleteMany: [ReferendumStatusScalarWhereInput!]
  updateMany: [ReferendumStatusUpdateManyWithWhereNestedInput!]
}

input ReferendumStatusUpdateManyWithWhereNestedInput {
  where: ReferendumStatusScalarWhereInput!
  data: ReferendumStatusUpdateManyDataInput!
}

input ReferendumStatusUpdateWithoutReferendumDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  status: String
  uniqueStatus: String
}

input ReferendumStatusUpdateWithWhereUniqueWithoutReferendumInput {
  where: ReferendumStatusWhereUniqueInput!
  data: ReferendumStatusUpdateWithoutReferendumDataInput!
}

input ReferendumStatusUpsertWithWhereUniqueWithoutReferendumInput {
  where: ReferendumStatusWhereUniqueInput!
  update: ReferendumStatusUpdateWithoutReferendumDataInput!
  create: ReferendumStatusCreateWithoutReferendumInput!
}

input ReferendumStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  referendum: ReferendumWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [ReferendumStatusWhereInput!]
  OR: [ReferendumStatusWhereInput!]
  NOT: [ReferendumStatusWhereInput!]
}

input ReferendumStatusWhereUniqueInput {
  id: ID
  uniqueStatus: String
}

type ReferendumSubscriptionPayload {
  mutation: MutationType!
  node: Referendum
  updatedFields: [String!]
  previousValues: ReferendumPreviousValues
}

input ReferendumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReferendumWhereInput
  AND: [ReferendumSubscriptionWhereInput!]
  OR: [ReferendumSubscriptionWhereInput!]
  NOT: [ReferendumSubscriptionWhereInput!]
}

input ReferendumUpdateInput {
  delay: Int
  end: Int
  preimage: PreimageUpdateOneWithoutReferendumInput
  preimageHash: String
  referendumId: Int
  referendumStatus: ReferendumStatusUpdateManyWithoutReferendumInput
  voteThreshold: String
}

input ReferendumUpdateManyMutationInput {
  delay: Int
  end: Int
  preimageHash: String
  referendumId: Int
  voteThreshold: String
}

input ReferendumUpdateOneRequiredWithoutReferendumStatusInput {
  create: ReferendumCreateWithoutReferendumStatusInput
  update: ReferendumUpdateWithoutReferendumStatusDataInput
  upsert: ReferendumUpsertWithoutReferendumStatusInput
  connect: ReferendumWhereUniqueInput
}

input ReferendumUpdateOneWithoutPreimageInput {
  create: ReferendumCreateWithoutPreimageInput
  update: ReferendumUpdateWithoutPreimageDataInput
  upsert: ReferendumUpsertWithoutPreimageInput
  delete: Boolean
  disconnect: Boolean
  connect: ReferendumWhereUniqueInput
}

input ReferendumUpdateWithoutPreimageDataInput {
  delay: Int
  end: Int
  preimageHash: String
  referendumId: Int
  referendumStatus: ReferendumStatusUpdateManyWithoutReferendumInput
  voteThreshold: String
}

input ReferendumUpdateWithoutReferendumStatusDataInput {
  delay: Int
  end: Int
  preimage: PreimageUpdateOneWithoutReferendumInput
  preimageHash: String
  referendumId: Int
  voteThreshold: String
}

input ReferendumUpsertWithoutPreimageInput {
  update: ReferendumUpdateWithoutPreimageDataInput!
  create: ReferendumCreateWithoutPreimageInput!
}

input ReferendumUpsertWithoutReferendumStatusInput {
  update: ReferendumUpdateWithoutReferendumStatusDataInput!
  create: ReferendumCreateWithoutReferendumStatusInput!
}

input ReferendumWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  delay: Int
  delay_not: Int
  delay_in: [Int!]
  delay_not_in: [Int!]
  delay_lt: Int
  delay_lte: Int
  delay_gt: Int
  delay_gte: Int
  end: Int
  end_not: Int
  end_in: [Int!]
  end_not_in: [Int!]
  end_lt: Int
  end_lte: Int
  end_gt: Int
  end_gte: Int
  preimage: PreimageWhereInput
  preimageHash: String
  preimageHash_not: String
  preimageHash_in: [String!]
  preimageHash_not_in: [String!]
  preimageHash_lt: String
  preimageHash_lte: String
  preimageHash_gt: String
  preimageHash_gte: String
  preimageHash_contains: String
  preimageHash_not_contains: String
  preimageHash_starts_with: String
  preimageHash_not_starts_with: String
  preimageHash_ends_with: String
  preimageHash_not_ends_with: String
  referendumId: Int
  referendumId_not: Int
  referendumId_in: [Int!]
  referendumId_not_in: [Int!]
  referendumId_lt: Int
  referendumId_lte: Int
  referendumId_gt: Int
  referendumId_gte: Int
  referendumStatus_every: ReferendumStatusWhereInput
  referendumStatus_some: ReferendumStatusWhereInput
  referendumStatus_none: ReferendumStatusWhereInput
  voteThreshold: String
  voteThreshold_not: String
  voteThreshold_in: [String!]
  voteThreshold_not_in: [String!]
  voteThreshold_lt: String
  voteThreshold_lte: String
  voteThreshold_gt: String
  voteThreshold_gte: String
  voteThreshold_contains: String
  voteThreshold_not_contains: String
  voteThreshold_starts_with: String
  voteThreshold_not_starts_with: String
  voteThreshold_ends_with: String
  voteThreshold_not_ends_with: String
  AND: [ReferendumWhereInput!]
  OR: [ReferendumWhereInput!]
  NOT: [ReferendumWhereInput!]
}

input ReferendumWhereUniqueInput {
  id: Int
  referendumId: Int
}

type Reward {
  id: ID!
  authoredBlock: BlockNumber!
  sessionIndex: Session!
  treasuryReward: String!
  validatorReward: String!
}

type RewardConnection {
  pageInfo: PageInfo!
  edges: [RewardEdge]!
  aggregate: AggregateReward!
}

input RewardCreateInput {
  id: ID
  authoredBlock: BlockNumberCreateOneInput!
  sessionIndex: SessionCreateOneInput!
  treasuryReward: String!
  validatorReward: String!
}

type RewardEdge {
  node: Reward!
  cursor: String!
}

enum RewardOrderByInput {
  id_ASC
  id_DESC
  treasuryReward_ASC
  treasuryReward_DESC
  validatorReward_ASC
  validatorReward_DESC
}

type RewardPreviousValues {
  id: ID!
  treasuryReward: String!
  validatorReward: String!
}

type RewardSubscriptionPayload {
  mutation: MutationType!
  node: Reward
  updatedFields: [String!]
  previousValues: RewardPreviousValues
}

input RewardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RewardWhereInput
  AND: [RewardSubscriptionWhereInput!]
  OR: [RewardSubscriptionWhereInput!]
  NOT: [RewardSubscriptionWhereInput!]
}

input RewardUpdateInput {
  authoredBlock: BlockNumberUpdateOneRequiredInput
  sessionIndex: SessionUpdateOneRequiredInput
  treasuryReward: String
  validatorReward: String
}

input RewardUpdateManyMutationInput {
  treasuryReward: String
  validatorReward: String
}

input RewardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authoredBlock: BlockNumberWhereInput
  sessionIndex: SessionWhereInput
  treasuryReward: String
  treasuryReward_not: String
  treasuryReward_in: [String!]
  treasuryReward_not_in: [String!]
  treasuryReward_lt: String
  treasuryReward_lte: String
  treasuryReward_gt: String
  treasuryReward_gte: String
  treasuryReward_contains: String
  treasuryReward_not_contains: String
  treasuryReward_starts_with: String
  treasuryReward_not_starts_with: String
  treasuryReward_ends_with: String
  treasuryReward_not_ends_with: String
  validatorReward: String
  validatorReward_not: String
  validatorReward_in: [String!]
  validatorReward_not_in: [String!]
  validatorReward_lt: String
  validatorReward_lte: String
  validatorReward_gt: String
  validatorReward_gte: String
  validatorReward_contains: String
  validatorReward_not_contains: String
  validatorReward_starts_with: String
  validatorReward_not_starts_with: String
  validatorReward_ends_with: String
  validatorReward_not_ends_with: String
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
}

input RewardWhereUniqueInput {
  id: ID
}

type Session {
  id: ID!
  index: Int!
  start: BlockNumber!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  index: Int!
  start: BlockNumberCreateOneInput!
}

input SessionCreateOneInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
}

type SessionPreviousValues {
  id: ID!
  index: Int!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateDataInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateManyMutationInput {
  index: Int
}

input SessionUpdateOneRequiredInput {
  create: SessionCreateInput
  update: SessionUpdateDataInput
  upsert: SessionUpsertNestedInput
  connect: SessionWhereUniqueInput
}

input SessionUpsertNestedInput {
  update: SessionUpdateDataInput!
  create: SessionCreateInput!
}

input SessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  start: BlockNumberWhereInput
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

input SessionWhereUniqueInput {
  id: ID
  index: Int
}

type Slashing {
  id: ID!
  blockNumber: BlockNumber!
  who: String!
  amount: String!
}

type SlashingConnection {
  pageInfo: PageInfo!
  edges: [SlashingEdge]!
  aggregate: AggregateSlashing!
}

input SlashingCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  who: String!
  amount: String!
}

type SlashingEdge {
  node: Slashing!
  cursor: String!
}

enum SlashingOrderByInput {
  id_ASC
  id_DESC
  who_ASC
  who_DESC
  amount_ASC
  amount_DESC
}

type SlashingPreviousValues {
  id: ID!
  who: String!
  amount: String!
}

type SlashingSubscriptionPayload {
  mutation: MutationType!
  node: Slashing
  updatedFields: [String!]
  previousValues: SlashingPreviousValues
}

input SlashingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SlashingWhereInput
  AND: [SlashingSubscriptionWhereInput!]
  OR: [SlashingSubscriptionWhereInput!]
  NOT: [SlashingSubscriptionWhereInput!]
}

input SlashingUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  who: String
  amount: String
}

input SlashingUpdateManyMutationInput {
  who: String
  amount: String
}

input SlashingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  who: String
  who_not: String
  who_in: [String!]
  who_not_in: [String!]
  who_lt: String
  who_lte: String
  who_gt: String
  who_gte: String
  who_contains: String
  who_not_contains: String
  who_starts_with: String
  who_not_starts_with: String
  who_ends_with: String
  who_not_ends_with: String
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  AND: [SlashingWhereInput!]
  OR: [SlashingWhereInput!]
  NOT: [SlashingWhereInput!]
}

input SlashingWhereUniqueInput {
  id: ID
  who: String
}

type Stake {
  id: ID!
  blockNumber: BlockNumber!
  totalStake: String!
}

type StakeConnection {
  pageInfo: PageInfo!
  edges: [StakeEdge]!
  aggregate: AggregateStake!
}

input StakeCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  totalStake: String!
}

type StakeEdge {
  node: Stake!
  cursor: String!
}

enum StakeOrderByInput {
  id_ASC
  id_DESC
  totalStake_ASC
  totalStake_DESC
}

type StakePreviousValues {
  id: ID!
  totalStake: String!
}

type StakeSubscriptionPayload {
  mutation: MutationType!
  node: Stake
  updatedFields: [String!]
  previousValues: StakePreviousValues
}

input StakeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StakeWhereInput
  AND: [StakeSubscriptionWhereInput!]
  OR: [StakeSubscriptionWhereInput!]
  NOT: [StakeSubscriptionWhereInput!]
}

input StakeUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  totalStake: String
}

input StakeUpdateManyMutationInput {
  totalStake: String
}

input StakeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  totalStake: String
  totalStake_not: String
  totalStake_in: [String!]
  totalStake_not_in: [String!]
  totalStake_lt: String
  totalStake_lte: String
  totalStake_gt: String
  totalStake_gte: String
  totalStake_contains: String
  totalStake_not_contains: String
  totalStake_starts_with: String
  totalStake_not_starts_with: String
  totalStake_ends_with: String
  totalStake_not_ends_with: String
  AND: [StakeWhereInput!]
  OR: [StakeWhereInput!]
  NOT: [StakeWhereInput!]
}

input StakeWhereUniqueInput {
  id: ID
}

type Subscription {
  blockIndex(where: BlockIndexSubscriptionWhereInput): BlockIndexSubscriptionPayload
  blockNumber(where: BlockNumberSubscriptionWhereInput): BlockNumberSubscriptionPayload
  council(where: CouncilSubscriptionWhereInput): CouncilSubscriptionPayload
  councilMember(where: CouncilMemberSubscriptionWhereInput): CouncilMemberSubscriptionPayload
  era(where: EraSubscriptionWhereInput): EraSubscriptionPayload
  heartBeat(where: HeartBeatSubscriptionWhereInput): HeartBeatSubscriptionPayload
  motion(where: MotionSubscriptionWhereInput): MotionSubscriptionPayload
  motionProposalArgument(where: MotionProposalArgumentSubscriptionWhereInput): MotionProposalArgumentSubscriptionPayload
  motionStatus(where: MotionStatusSubscriptionWhereInput): MotionStatusSubscriptionPayload
  nomination(where: NominationSubscriptionWhereInput): NominationSubscriptionPayload
  offlineValidator(where: OfflineValidatorSubscriptionWhereInput): OfflineValidatorSubscriptionPayload
  preimage(where: PreimageSubscriptionWhereInput): PreimageSubscriptionPayload
  preimageArgument(where: PreimageArgumentSubscriptionWhereInput): PreimageArgumentSubscriptionPayload
  preimageStatus(where: PreimageStatusSubscriptionWhereInput): PreimageStatusSubscriptionPayload
  proposal(where: ProposalSubscriptionWhereInput): ProposalSubscriptionPayload
  proposalStatus(where: ProposalStatusSubscriptionWhereInput): ProposalStatusSubscriptionPayload
  referendum(where: ReferendumSubscriptionWhereInput): ReferendumSubscriptionPayload
  referendumStatus(where: ReferendumStatusSubscriptionWhereInput): ReferendumStatusSubscriptionPayload
  reward(where: RewardSubscriptionWhereInput): RewardSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  slashing(where: SlashingSubscriptionWhereInput): SlashingSubscriptionPayload
  stake(where: StakeSubscriptionWhereInput): StakeSubscriptionPayload
  totalIssuance(where: TotalIssuanceSubscriptionWhereInput): TotalIssuanceSubscriptionPayload
  treasurySpendProposal(where: TreasurySpendProposalSubscriptionWhereInput): TreasurySpendProposalSubscriptionPayload
  treasuryStatus(where: TreasuryStatusSubscriptionWhereInput): TreasuryStatusSubscriptionPayload
  validator(where: ValidatorSubscriptionWhereInput): ValidatorSubscriptionPayload
}

type TotalIssuance {
  id: ID!
  blockNumber: BlockNumber!
  amount: String!
}

type TotalIssuanceConnection {
  pageInfo: PageInfo!
  edges: [TotalIssuanceEdge]!
  aggregate: AggregateTotalIssuance!
}

input TotalIssuanceCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  amount: String!
}

type TotalIssuanceEdge {
  node: TotalIssuance!
  cursor: String!
}

enum TotalIssuanceOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type TotalIssuancePreviousValues {
  id: ID!
  amount: String!
}

type TotalIssuanceSubscriptionPayload {
  mutation: MutationType!
  node: TotalIssuance
  updatedFields: [String!]
  previousValues: TotalIssuancePreviousValues
}

input TotalIssuanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TotalIssuanceWhereInput
  AND: [TotalIssuanceSubscriptionWhereInput!]
  OR: [TotalIssuanceSubscriptionWhereInput!]
  NOT: [TotalIssuanceSubscriptionWhereInput!]
}

input TotalIssuanceUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  amount: String
}

input TotalIssuanceUpdateManyMutationInput {
  amount: String
}

input TotalIssuanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  AND: [TotalIssuanceWhereInput!]
  OR: [TotalIssuanceWhereInput!]
  NOT: [TotalIssuanceWhereInput!]
}

input TotalIssuanceWhereUniqueInput {
  id: ID
}

type TreasurySpendProposal {
  id: Int!
  proposer: String!
  beneficiary: String!
  value: String!
  bond: String!
  treasuryProposalId: Int!
  treasuryStatus(where: TreasuryStatusWhereInput, orderBy: TreasuryStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TreasuryStatus!]
  motion: Motion
}

type TreasurySpendProposalConnection {
  pageInfo: PageInfo!
  edges: [TreasurySpendProposalEdge]!
  aggregate: AggregateTreasurySpendProposal!
}

input TreasurySpendProposalCreateInput {
  proposer: String!
  beneficiary: String!
  value: String!
  bond: String!
  treasuryProposalId: Int!
  treasuryStatus: TreasuryStatusCreateManyWithoutTreasurySpendProposalInput
  motion: MotionCreateOneWithoutTreasurySpendProposalInput
}

input TreasurySpendProposalCreateOneWithoutMotionInput {
  create: TreasurySpendProposalCreateWithoutMotionInput
  connect: TreasurySpendProposalWhereUniqueInput
}

input TreasurySpendProposalCreateOneWithoutTreasuryStatusInput {
  create: TreasurySpendProposalCreateWithoutTreasuryStatusInput
  connect: TreasurySpendProposalWhereUniqueInput
}

input TreasurySpendProposalCreateWithoutMotionInput {
  proposer: String!
  beneficiary: String!
  value: String!
  bond: String!
  treasuryProposalId: Int!
  treasuryStatus: TreasuryStatusCreateManyWithoutTreasurySpendProposalInput
}

input TreasurySpendProposalCreateWithoutTreasuryStatusInput {
  proposer: String!
  beneficiary: String!
  value: String!
  bond: String!
  treasuryProposalId: Int!
  motion: MotionCreateOneWithoutTreasurySpendProposalInput
}

type TreasurySpendProposalEdge {
  node: TreasurySpendProposal!
  cursor: String!
}

enum TreasurySpendProposalOrderByInput {
  id_ASC
  id_DESC
  proposer_ASC
  proposer_DESC
  beneficiary_ASC
  beneficiary_DESC
  value_ASC
  value_DESC
  bond_ASC
  bond_DESC
  treasuryProposalId_ASC
  treasuryProposalId_DESC
}

type TreasurySpendProposalPreviousValues {
  id: Int!
  proposer: String!
  beneficiary: String!
  value: String!
  bond: String!
  treasuryProposalId: Int!
}

type TreasurySpendProposalSubscriptionPayload {
  mutation: MutationType!
  node: TreasurySpendProposal
  updatedFields: [String!]
  previousValues: TreasurySpendProposalPreviousValues
}

input TreasurySpendProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TreasurySpendProposalWhereInput
  AND: [TreasurySpendProposalSubscriptionWhereInput!]
  OR: [TreasurySpendProposalSubscriptionWhereInput!]
  NOT: [TreasurySpendProposalSubscriptionWhereInput!]
}

input TreasurySpendProposalUpdateInput {
  proposer: String
  beneficiary: String
  value: String
  bond: String
  treasuryProposalId: Int
  treasuryStatus: TreasuryStatusUpdateManyWithoutTreasurySpendProposalInput
  motion: MotionUpdateOneWithoutTreasurySpendProposalInput
}

input TreasurySpendProposalUpdateManyMutationInput {
  proposer: String
  beneficiary: String
  value: String
  bond: String
  treasuryProposalId: Int
}

input TreasurySpendProposalUpdateOneRequiredWithoutTreasuryStatusInput {
  create: TreasurySpendProposalCreateWithoutTreasuryStatusInput
  update: TreasurySpendProposalUpdateWithoutTreasuryStatusDataInput
  upsert: TreasurySpendProposalUpsertWithoutTreasuryStatusInput
  connect: TreasurySpendProposalWhereUniqueInput
}

input TreasurySpendProposalUpdateOneWithoutMotionInput {
  create: TreasurySpendProposalCreateWithoutMotionInput
  update: TreasurySpendProposalUpdateWithoutMotionDataInput
  upsert: TreasurySpendProposalUpsertWithoutMotionInput
  delete: Boolean
  disconnect: Boolean
  connect: TreasurySpendProposalWhereUniqueInput
}

input TreasurySpendProposalUpdateWithoutMotionDataInput {
  proposer: String
  beneficiary: String
  value: String
  bond: String
  treasuryProposalId: Int
  treasuryStatus: TreasuryStatusUpdateManyWithoutTreasurySpendProposalInput
}

input TreasurySpendProposalUpdateWithoutTreasuryStatusDataInput {
  proposer: String
  beneficiary: String
  value: String
  bond: String
  treasuryProposalId: Int
  motion: MotionUpdateOneWithoutTreasurySpendProposalInput
}

input TreasurySpendProposalUpsertWithoutMotionInput {
  update: TreasurySpendProposalUpdateWithoutMotionDataInput!
  create: TreasurySpendProposalCreateWithoutMotionInput!
}

input TreasurySpendProposalUpsertWithoutTreasuryStatusInput {
  update: TreasurySpendProposalUpdateWithoutTreasuryStatusDataInput!
  create: TreasurySpendProposalCreateWithoutTreasuryStatusInput!
}

input TreasurySpendProposalWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  proposer: String
  proposer_not: String
  proposer_in: [String!]
  proposer_not_in: [String!]
  proposer_lt: String
  proposer_lte: String
  proposer_gt: String
  proposer_gte: String
  proposer_contains: String
  proposer_not_contains: String
  proposer_starts_with: String
  proposer_not_starts_with: String
  proposer_ends_with: String
  proposer_not_ends_with: String
  beneficiary: String
  beneficiary_not: String
  beneficiary_in: [String!]
  beneficiary_not_in: [String!]
  beneficiary_lt: String
  beneficiary_lte: String
  beneficiary_gt: String
  beneficiary_gte: String
  beneficiary_contains: String
  beneficiary_not_contains: String
  beneficiary_starts_with: String
  beneficiary_not_starts_with: String
  beneficiary_ends_with: String
  beneficiary_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  bond: String
  bond_not: String
  bond_in: [String!]
  bond_not_in: [String!]
  bond_lt: String
  bond_lte: String
  bond_gt: String
  bond_gte: String
  bond_contains: String
  bond_not_contains: String
  bond_starts_with: String
  bond_not_starts_with: String
  bond_ends_with: String
  bond_not_ends_with: String
  treasuryProposalId: Int
  treasuryProposalId_not: Int
  treasuryProposalId_in: [Int!]
  treasuryProposalId_not_in: [Int!]
  treasuryProposalId_lt: Int
  treasuryProposalId_lte: Int
  treasuryProposalId_gt: Int
  treasuryProposalId_gte: Int
  treasuryStatus_every: TreasuryStatusWhereInput
  treasuryStatus_some: TreasuryStatusWhereInput
  treasuryStatus_none: TreasuryStatusWhereInput
  motion: MotionWhereInput
  AND: [TreasurySpendProposalWhereInput!]
  OR: [TreasurySpendProposalWhereInput!]
  NOT: [TreasurySpendProposalWhereInput!]
}

input TreasurySpendProposalWhereUniqueInput {
  id: Int
  treasuryProposalId: Int
}

type TreasuryStatus {
  id: ID!
  blockNumber: BlockNumber!
  treasurySpendProposal: TreasurySpendProposal!
  status: String!
  uniqueStatus: String!
}

type TreasuryStatusConnection {
  pageInfo: PageInfo!
  edges: [TreasuryStatusEdge]!
  aggregate: AggregateTreasuryStatus!
}

input TreasuryStatusCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  treasurySpendProposal: TreasurySpendProposalCreateOneWithoutTreasuryStatusInput!
  status: String!
  uniqueStatus: String!
}

input TreasuryStatusCreateManyWithoutTreasurySpendProposalInput {
  create: [TreasuryStatusCreateWithoutTreasurySpendProposalInput!]
  connect: [TreasuryStatusWhereUniqueInput!]
}

input TreasuryStatusCreateWithoutTreasurySpendProposalInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  status: String!
  uniqueStatus: String!
}

type TreasuryStatusEdge {
  node: TreasuryStatus!
  cursor: String!
}

enum TreasuryStatusOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  uniqueStatus_ASC
  uniqueStatus_DESC
}

type TreasuryStatusPreviousValues {
  id: ID!
  status: String!
  uniqueStatus: String!
}

input TreasuryStatusScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [TreasuryStatusScalarWhereInput!]
  OR: [TreasuryStatusScalarWhereInput!]
  NOT: [TreasuryStatusScalarWhereInput!]
}

type TreasuryStatusSubscriptionPayload {
  mutation: MutationType!
  node: TreasuryStatus
  updatedFields: [String!]
  previousValues: TreasuryStatusPreviousValues
}

input TreasuryStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TreasuryStatusWhereInput
  AND: [TreasuryStatusSubscriptionWhereInput!]
  OR: [TreasuryStatusSubscriptionWhereInput!]
  NOT: [TreasuryStatusSubscriptionWhereInput!]
}

input TreasuryStatusUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  treasurySpendProposal: TreasurySpendProposalUpdateOneRequiredWithoutTreasuryStatusInput
  status: String
  uniqueStatus: String
}

input TreasuryStatusUpdateManyDataInput {
  status: String
  uniqueStatus: String
}

input TreasuryStatusUpdateManyMutationInput {
  status: String
  uniqueStatus: String
}

input TreasuryStatusUpdateManyWithoutTreasurySpendProposalInput {
  create: [TreasuryStatusCreateWithoutTreasurySpendProposalInput!]
  delete: [TreasuryStatusWhereUniqueInput!]
  connect: [TreasuryStatusWhereUniqueInput!]
  set: [TreasuryStatusWhereUniqueInput!]
  disconnect: [TreasuryStatusWhereUniqueInput!]
  update: [TreasuryStatusUpdateWithWhereUniqueWithoutTreasurySpendProposalInput!]
  upsert: [TreasuryStatusUpsertWithWhereUniqueWithoutTreasurySpendProposalInput!]
  deleteMany: [TreasuryStatusScalarWhereInput!]
  updateMany: [TreasuryStatusUpdateManyWithWhereNestedInput!]
}

input TreasuryStatusUpdateManyWithWhereNestedInput {
  where: TreasuryStatusScalarWhereInput!
  data: TreasuryStatusUpdateManyDataInput!
}

input TreasuryStatusUpdateWithoutTreasurySpendProposalDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  status: String
  uniqueStatus: String
}

input TreasuryStatusUpdateWithWhereUniqueWithoutTreasurySpendProposalInput {
  where: TreasuryStatusWhereUniqueInput!
  data: TreasuryStatusUpdateWithoutTreasurySpendProposalDataInput!
}

input TreasuryStatusUpsertWithWhereUniqueWithoutTreasurySpendProposalInput {
  where: TreasuryStatusWhereUniqueInput!
  update: TreasuryStatusUpdateWithoutTreasurySpendProposalDataInput!
  create: TreasuryStatusCreateWithoutTreasurySpendProposalInput!
}

input TreasuryStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  treasurySpendProposal: TreasurySpendProposalWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  uniqueStatus: String
  uniqueStatus_not: String
  uniqueStatus_in: [String!]
  uniqueStatus_not_in: [String!]
  uniqueStatus_lt: String
  uniqueStatus_lte: String
  uniqueStatus_gt: String
  uniqueStatus_gte: String
  uniqueStatus_contains: String
  uniqueStatus_not_contains: String
  uniqueStatus_starts_with: String
  uniqueStatus_not_starts_with: String
  uniqueStatus_ends_with: String
  uniqueStatus_not_ends_with: String
  AND: [TreasuryStatusWhereInput!]
  OR: [TreasuryStatusWhereInput!]
  NOT: [TreasuryStatusWhereInput!]
}

input TreasuryStatusWhereUniqueInput {
  id: ID
  uniqueStatus: String
}

type Validator {
  id: ID!
  session: Session!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorConnection {
  pageInfo: PageInfo!
  edges: [ValidatorEdge]!
  aggregate: AggregateValidator!
}

input ValidatorCreateInput {
  id: ID
  session: SessionCreateOneInput!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorEdge {
  node: Validator!
  cursor: String!
}

enum ValidatorOrderByInput {
  id_ASC
  id_DESC
  controller_ASC
  controller_DESC
  stash_ASC
  stash_DESC
  preferences_ASC
  preferences_DESC
}

type ValidatorPreviousValues {
  id: ID!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorSubscriptionPayload {
  mutation: MutationType!
  node: Validator
  updatedFields: [String!]
  previousValues: ValidatorPreviousValues
}

input ValidatorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ValidatorWhereInput
  AND: [ValidatorSubscriptionWhereInput!]
  OR: [ValidatorSubscriptionWhereInput!]
  NOT: [ValidatorSubscriptionWhereInput!]
}

input ValidatorUpdateInput {
  session: SessionUpdateOneRequiredInput
  controller: String
  stash: String
  preferences: String
}

input ValidatorUpdateManyMutationInput {
  controller: String
  stash: String
  preferences: String
}

input ValidatorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  session: SessionWhereInput
  controller: String
  controller_not: String
  controller_in: [String!]
  controller_not_in: [String!]
  controller_lt: String
  controller_lte: String
  controller_gt: String
  controller_gte: String
  controller_contains: String
  controller_not_contains: String
  controller_starts_with: String
  controller_not_starts_with: String
  controller_ends_with: String
  controller_not_ends_with: String
  stash: String
  stash_not: String
  stash_in: [String!]
  stash_not_in: [String!]
  stash_lt: String
  stash_lte: String
  stash_gt: String
  stash_gte: String
  stash_contains: String
  stash_not_contains: String
  stash_starts_with: String
  stash_not_starts_with: String
  stash_ends_with: String
  stash_not_ends_with: String
  preferences: String
  preferences_not: String
  preferences_in: [String!]
  preferences_not_in: [String!]
  preferences_lt: String
  preferences_lte: String
  preferences_gt: String
  preferences_gte: String
  preferences_contains: String
  preferences_not_contains: String
  preferences_starts_with: String
  preferences_not_starts_with: String
  preferences_ends_with: String
  preferences_not_ends_with: String
  AND: [ValidatorWhereInput!]
  OR: [ValidatorWhereInput!]
  NOT: [ValidatorWhereInput!]
}

input ValidatorWhereUniqueInput {
  id: ID
}
`