# source: http://127.0.0.1:4466
# timestamp: Fri Dec 27 2019 13:56:43 GMT+0100 (Central European Standard Time)

type AggregateBlockNumber {
  count: Int!
}

type AggregateEra {
  count: Int!
}

type AggregateNomination {
  count: Int!
}

type AggregateReward {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSlashing {
  count: Int!
}

type AggregateStake {
  count: Int!
}

type AggregateTotalIssuance {
  count: Int!
}

type AggregateValidator {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BlockNumber implements Node {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

"""A connection to a list of items."""
type BlockNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlockNumberEdge]!
  aggregate: AggregateBlockNumber!
}

input BlockNumberCreateInput {
  id: ID
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

input BlockNumberCreateOneInput {
  create: BlockNumberCreateInput
  connect: BlockNumberWhereUniqueInput
}

"""An edge in a connection."""
type BlockNumberEdge {
  """The item at the end of the edge."""
  node: BlockNumber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlockNumberOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  authoredBy_ASC
  authoredBy_DESC
  startDateTime_ASC
  startDateTime_DESC
  hash_ASC
  hash_DESC
}

type BlockNumberPreviousValues {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

type BlockNumberSubscriptionPayload {
  mutation: MutationType!
  node: BlockNumber
  updatedFields: [String!]
  previousValues: BlockNumberPreviousValues
}

input BlockNumberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockNumberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockNumberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockNumberSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlockNumberWhereInput
}

input BlockNumberUpdateDataInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateManyMutationInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateOneRequiredInput {
  create: BlockNumberCreateInput
  connect: BlockNumberWhereUniqueInput
  update: BlockNumberUpdateDataInput
  upsert: BlockNumberUpsertNestedInput
}

input BlockNumberUpsertNestedInput {
  update: BlockNumberUpdateDataInput!
  create: BlockNumberCreateInput!
}

input BlockNumberWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockNumberWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockNumberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockNumberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  authoredBy: String

  """All values that are not equal to given value."""
  authoredBy_not: String

  """All values that are contained in given list."""
  authoredBy_in: [String!]

  """All values that are not contained in given list."""
  authoredBy_not_in: [String!]

  """All values less than the given value."""
  authoredBy_lt: String

  """All values less than or equal the given value."""
  authoredBy_lte: String

  """All values greater than the given value."""
  authoredBy_gt: String

  """All values greater than or equal the given value."""
  authoredBy_gte: String

  """All values containing the given string."""
  authoredBy_contains: String

  """All values not containing the given string."""
  authoredBy_not_contains: String

  """All values starting with the given string."""
  authoredBy_starts_with: String

  """All values not starting with the given string."""
  authoredBy_not_starts_with: String

  """All values ending with the given string."""
  authoredBy_ends_with: String

  """All values not ending with the given string."""
  authoredBy_not_ends_with: String
  startDateTime: DateTime

  """All values that are not equal to given value."""
  startDateTime_not: DateTime

  """All values that are contained in given list."""
  startDateTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startDateTime_not_in: [DateTime!]

  """All values less than the given value."""
  startDateTime_lt: DateTime

  """All values less than or equal the given value."""
  startDateTime_lte: DateTime

  """All values greater than the given value."""
  startDateTime_gt: DateTime

  """All values greater than or equal the given value."""
  startDateTime_gte: DateTime
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
}

input BlockNumberWhereUniqueInput {
  id: ID
  number: Int
  hash: String
}

scalar DateTime

type Era implements Node {
  id: ID!
  index: Int!
  eraStartSessionIndex: Session!
  totalPoints: String!
  individualPoints: [String!]!
}

"""A connection to a list of items."""
type EraConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EraEdge]!
  aggregate: AggregateEra!
}

input EraCreateindividualPointsInput {
  set: [String!]
}

input EraCreateInput {
  id: ID
  index: Int!
  totalPoints: String!
  individualPoints: EraCreateindividualPointsInput
  eraStartSessionIndex: SessionCreateOneInput!
}

"""An edge in a connection."""
type EraEdge {
  """The item at the end of the edge."""
  node: Era!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EraOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  totalPoints_ASC
  totalPoints_DESC
}

type EraPreviousValues {
  id: ID!
  index: Int!
  totalPoints: String!
  individualPoints: [String!]!
}

type EraSubscriptionPayload {
  mutation: MutationType!
  node: Era
  updatedFields: [String!]
  previousValues: EraPreviousValues
}

input EraSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EraSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EraSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EraSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EraWhereInput
}

input EraUpdateindividualPointsInput {
  set: [String!]
}

input EraUpdateInput {
  index: Int
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
  eraStartSessionIndex: SessionUpdateOneRequiredInput
}

input EraUpdateManyMutationInput {
  index: Int
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
}

input EraWhereInput {
  """Logical AND on all given filters."""
  AND: [EraWhereInput!]

  """Logical OR on all given filters."""
  OR: [EraWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EraWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  totalPoints: String

  """All values that are not equal to given value."""
  totalPoints_not: String

  """All values that are contained in given list."""
  totalPoints_in: [String!]

  """All values that are not contained in given list."""
  totalPoints_not_in: [String!]

  """All values less than the given value."""
  totalPoints_lt: String

  """All values less than or equal the given value."""
  totalPoints_lte: String

  """All values greater than the given value."""
  totalPoints_gt: String

  """All values greater than or equal the given value."""
  totalPoints_gte: String

  """All values containing the given string."""
  totalPoints_contains: String

  """All values not containing the given string."""
  totalPoints_not_contains: String

  """All values starting with the given string."""
  totalPoints_starts_with: String

  """All values not starting with the given string."""
  totalPoints_not_starts_with: String

  """All values ending with the given string."""
  totalPoints_ends_with: String

  """All values not ending with the given string."""
  totalPoints_not_ends_with: String
  eraStartSessionIndex: SessionWhereInput
}

input EraWhereUniqueInput {
  id: ID
  index: Int
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEra(data: EraCreateInput!): Era!
  createSlashing(data: SlashingCreateInput!): Slashing!
  createValidator(data: ValidatorCreateInput!): Validator!
  createTotalIssuance(data: TotalIssuanceCreateInput!): TotalIssuance!
  createReward(data: RewardCreateInput!): Reward!
  createNomination(data: NominationCreateInput!): Nomination!
  createStake(data: StakeCreateInput!): Stake!
  createBlockNumber(data: BlockNumberCreateInput!): BlockNumber!
  createSession(data: SessionCreateInput!): Session!
  updateEra(data: EraUpdateInput!, where: EraWhereUniqueInput!): Era
  updateSlashing(data: SlashingUpdateInput!, where: SlashingWhereUniqueInput!): Slashing
  updateValidator(data: ValidatorUpdateInput!, where: ValidatorWhereUniqueInput!): Validator
  updateTotalIssuance(data: TotalIssuanceUpdateInput!, where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  updateReward(data: RewardUpdateInput!, where: RewardWhereUniqueInput!): Reward
  updateNomination(data: NominationUpdateInput!, where: NominationWhereUniqueInput!): Nomination
  updateStake(data: StakeUpdateInput!, where: StakeWhereUniqueInput!): Stake
  updateBlockNumber(data: BlockNumberUpdateInput!, where: BlockNumberWhereUniqueInput!): BlockNumber
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  deleteEra(where: EraWhereUniqueInput!): Era
  deleteSlashing(where: SlashingWhereUniqueInput!): Slashing
  deleteValidator(where: ValidatorWhereUniqueInput!): Validator
  deleteTotalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  deleteReward(where: RewardWhereUniqueInput!): Reward
  deleteNomination(where: NominationWhereUniqueInput!): Nomination
  deleteStake(where: StakeWhereUniqueInput!): Stake
  deleteBlockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  deleteSession(where: SessionWhereUniqueInput!): Session
  upsertEra(where: EraWhereUniqueInput!, create: EraCreateInput!, update: EraUpdateInput!): Era!
  upsertSlashing(where: SlashingWhereUniqueInput!, create: SlashingCreateInput!, update: SlashingUpdateInput!): Slashing!
  upsertValidator(where: ValidatorWhereUniqueInput!, create: ValidatorCreateInput!, update: ValidatorUpdateInput!): Validator!
  upsertTotalIssuance(where: TotalIssuanceWhereUniqueInput!, create: TotalIssuanceCreateInput!, update: TotalIssuanceUpdateInput!): TotalIssuance!
  upsertReward(where: RewardWhereUniqueInput!, create: RewardCreateInput!, update: RewardUpdateInput!): Reward!
  upsertNomination(where: NominationWhereUniqueInput!, create: NominationCreateInput!, update: NominationUpdateInput!): Nomination!
  upsertStake(where: StakeWhereUniqueInput!, create: StakeCreateInput!, update: StakeUpdateInput!): Stake!
  upsertBlockNumber(where: BlockNumberWhereUniqueInput!, create: BlockNumberCreateInput!, update: BlockNumberUpdateInput!): BlockNumber!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  updateManyEras(data: EraUpdateManyMutationInput!, where: EraWhereInput): BatchPayload!
  updateManySlashings(data: SlashingUpdateManyMutationInput!, where: SlashingWhereInput): BatchPayload!
  updateManyValidators(data: ValidatorUpdateManyMutationInput!, where: ValidatorWhereInput): BatchPayload!
  updateManyTotalIssuances(data: TotalIssuanceUpdateManyMutationInput!, where: TotalIssuanceWhereInput): BatchPayload!
  updateManyRewards(data: RewardUpdateManyMutationInput!, where: RewardWhereInput): BatchPayload!
  updateManyNominations(data: NominationUpdateManyMutationInput!, where: NominationWhereInput): BatchPayload!
  updateManyStakes(data: StakeUpdateManyMutationInput!, where: StakeWhereInput): BatchPayload!
  updateManyBlockNumbers(data: BlockNumberUpdateManyMutationInput!, where: BlockNumberWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  deleteManyEras(where: EraWhereInput): BatchPayload!
  deleteManySlashings(where: SlashingWhereInput): BatchPayload!
  deleteManyValidators(where: ValidatorWhereInput): BatchPayload!
  deleteManyTotalIssuances(where: TotalIssuanceWhereInput): BatchPayload!
  deleteManyRewards(where: RewardWhereInput): BatchPayload!
  deleteManyNominations(where: NominationWhereInput): BatchPayload!
  deleteManyStakes(where: StakeWhereInput): BatchPayload!
  deleteManyBlockNumbers(where: BlockNumberWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Nomination implements Node {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  session: Session!
  bonded: String!
}

"""A connection to a list of items."""
type NominationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NominationEdge]!
  aggregate: AggregateNomination!
}

input NominationCreateInput {
  id: ID
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  bonded: String!
  session: SessionCreateOneInput!
}

"""An edge in a connection."""
type NominationEdge {
  """The item at the end of the edge."""
  node: Nomination!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NominationOrderByInput {
  id_ASC
  id_DESC
  validatorController_ASC
  validatorController_DESC
  validatorStash_ASC
  validatorStash_DESC
  nominatorController_ASC
  nominatorController_DESC
  nominatorStash_ASC
  nominatorStash_DESC
  bonded_ASC
  bonded_DESC
}

type NominationPreviousValues {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  bonded: String!
}

type NominationSubscriptionPayload {
  mutation: MutationType!
  node: Nomination
  updatedFields: [String!]
  previousValues: NominationPreviousValues
}

input NominationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NominationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NominationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NominationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NominationWhereInput
}

input NominationUpdateInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  bonded: String
  session: SessionUpdateOneRequiredInput
}

input NominationUpdateManyMutationInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  bonded: String
}

input NominationWhereInput {
  """Logical AND on all given filters."""
  AND: [NominationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NominationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NominationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  validatorController: String

  """All values that are not equal to given value."""
  validatorController_not: String

  """All values that are contained in given list."""
  validatorController_in: [String!]

  """All values that are not contained in given list."""
  validatorController_not_in: [String!]

  """All values less than the given value."""
  validatorController_lt: String

  """All values less than or equal the given value."""
  validatorController_lte: String

  """All values greater than the given value."""
  validatorController_gt: String

  """All values greater than or equal the given value."""
  validatorController_gte: String

  """All values containing the given string."""
  validatorController_contains: String

  """All values not containing the given string."""
  validatorController_not_contains: String

  """All values starting with the given string."""
  validatorController_starts_with: String

  """All values not starting with the given string."""
  validatorController_not_starts_with: String

  """All values ending with the given string."""
  validatorController_ends_with: String

  """All values not ending with the given string."""
  validatorController_not_ends_with: String
  validatorStash: String

  """All values that are not equal to given value."""
  validatorStash_not: String

  """All values that are contained in given list."""
  validatorStash_in: [String!]

  """All values that are not contained in given list."""
  validatorStash_not_in: [String!]

  """All values less than the given value."""
  validatorStash_lt: String

  """All values less than or equal the given value."""
  validatorStash_lte: String

  """All values greater than the given value."""
  validatorStash_gt: String

  """All values greater than or equal the given value."""
  validatorStash_gte: String

  """All values containing the given string."""
  validatorStash_contains: String

  """All values not containing the given string."""
  validatorStash_not_contains: String

  """All values starting with the given string."""
  validatorStash_starts_with: String

  """All values not starting with the given string."""
  validatorStash_not_starts_with: String

  """All values ending with the given string."""
  validatorStash_ends_with: String

  """All values not ending with the given string."""
  validatorStash_not_ends_with: String
  nominatorController: String

  """All values that are not equal to given value."""
  nominatorController_not: String

  """All values that are contained in given list."""
  nominatorController_in: [String!]

  """All values that are not contained in given list."""
  nominatorController_not_in: [String!]

  """All values less than the given value."""
  nominatorController_lt: String

  """All values less than or equal the given value."""
  nominatorController_lte: String

  """All values greater than the given value."""
  nominatorController_gt: String

  """All values greater than or equal the given value."""
  nominatorController_gte: String

  """All values containing the given string."""
  nominatorController_contains: String

  """All values not containing the given string."""
  nominatorController_not_contains: String

  """All values starting with the given string."""
  nominatorController_starts_with: String

  """All values not starting with the given string."""
  nominatorController_not_starts_with: String

  """All values ending with the given string."""
  nominatorController_ends_with: String

  """All values not ending with the given string."""
  nominatorController_not_ends_with: String
  nominatorStash: String

  """All values that are not equal to given value."""
  nominatorStash_not: String

  """All values that are contained in given list."""
  nominatorStash_in: [String!]

  """All values that are not contained in given list."""
  nominatorStash_not_in: [String!]

  """All values less than the given value."""
  nominatorStash_lt: String

  """All values less than or equal the given value."""
  nominatorStash_lte: String

  """All values greater than the given value."""
  nominatorStash_gt: String

  """All values greater than or equal the given value."""
  nominatorStash_gte: String

  """All values containing the given string."""
  nominatorStash_contains: String

  """All values not containing the given string."""
  nominatorStash_not_contains: String

  """All values starting with the given string."""
  nominatorStash_starts_with: String

  """All values not starting with the given string."""
  nominatorStash_not_starts_with: String

  """All values ending with the given string."""
  nominatorStash_ends_with: String

  """All values not ending with the given string."""
  nominatorStash_not_ends_with: String
  bonded: String

  """All values that are not equal to given value."""
  bonded_not: String

  """All values that are contained in given list."""
  bonded_in: [String!]

  """All values that are not contained in given list."""
  bonded_not_in: [String!]

  """All values less than the given value."""
  bonded_lt: String

  """All values less than or equal the given value."""
  bonded_lte: String

  """All values greater than the given value."""
  bonded_gt: String

  """All values greater than or equal the given value."""
  bonded_gte: String

  """All values containing the given string."""
  bonded_contains: String

  """All values not containing the given string."""
  bonded_not_contains: String

  """All values starting with the given string."""
  bonded_starts_with: String

  """All values not starting with the given string."""
  bonded_not_starts_with: String

  """All values ending with the given string."""
  bonded_ends_with: String

  """All values not ending with the given string."""
  bonded_not_ends_with: String
  session: SessionWhereInput
}

input NominationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  eras(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Era]!
  slashings(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slashing]!
  validators(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Validator]!
  totalIssuances(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TotalIssuance]!
  rewards(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reward]!
  nominations(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nomination]!
  stakes(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stake]!
  blockNumbers(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockNumber]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  era(where: EraWhereUniqueInput!): Era
  slashing(where: SlashingWhereUniqueInput!): Slashing
  validator(where: ValidatorWhereUniqueInput!): Validator
  totalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  reward(where: RewardWhereUniqueInput!): Reward
  nomination(where: NominationWhereUniqueInput!): Nomination
  stake(where: StakeWhereUniqueInput!): Stake
  blockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  session(where: SessionWhereUniqueInput!): Session
  erasConnection(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EraConnection!
  slashingsConnection(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SlashingConnection!
  validatorsConnection(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValidatorConnection!
  totalIssuancesConnection(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TotalIssuanceConnection!
  rewardsConnection(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RewardConnection!
  nominationsConnection(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NominationConnection!
  stakesConnection(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StakeConnection!
  blockNumbersConnection(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockNumberConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Reward implements Node {
  id: ID!
  amount: String!
  authoredBlock: BlockNumber!
  recipients: [String!]!
}

"""A connection to a list of items."""
type RewardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardEdge]!
  aggregate: AggregateReward!
}

input RewardCreateInput {
  id: ID
  amount: String!
  recipients: RewardCreaterecipientsInput
  authoredBlock: BlockNumberCreateOneInput!
}

input RewardCreaterecipientsInput {
  set: [String!]
}

"""An edge in a connection."""
type RewardEdge {
  """The item at the end of the edge."""
  node: Reward!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RewardOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type RewardPreviousValues {
  id: ID!
  amount: String!
  recipients: [String!]!
}

type RewardSubscriptionPayload {
  mutation: MutationType!
  node: Reward
  updatedFields: [String!]
  previousValues: RewardPreviousValues
}

input RewardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RewardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RewardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RewardSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RewardWhereInput
}

input RewardUpdateInput {
  amount: String
  recipients: RewardUpdaterecipientsInput
  authoredBlock: BlockNumberUpdateOneRequiredInput
}

input RewardUpdateManyMutationInput {
  amount: String
  recipients: RewardUpdaterecipientsInput
}

input RewardUpdaterecipientsInput {
  set: [String!]
}

input RewardWhereInput {
  """Logical AND on all given filters."""
  AND: [RewardWhereInput!]

  """Logical OR on all given filters."""
  OR: [RewardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RewardWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: String

  """All values that are not equal to given value."""
  amount_not: String

  """All values that are contained in given list."""
  amount_in: [String!]

  """All values that are not contained in given list."""
  amount_not_in: [String!]

  """All values less than the given value."""
  amount_lt: String

  """All values less than or equal the given value."""
  amount_lte: String

  """All values greater than the given value."""
  amount_gt: String

  """All values greater than or equal the given value."""
  amount_gte: String

  """All values containing the given string."""
  amount_contains: String

  """All values not containing the given string."""
  amount_not_contains: String

  """All values starting with the given string."""
  amount_starts_with: String

  """All values not starting with the given string."""
  amount_not_starts_with: String

  """All values ending with the given string."""
  amount_ends_with: String

  """All values not ending with the given string."""
  amount_not_ends_with: String
  authoredBlock: BlockNumberWhereInput
}

input RewardWhereUniqueInput {
  id: ID
}

type Session implements Node {
  id: ID!
  index: Int!
  start: BlockNumber!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  index: Int!
  start: BlockNumberCreateOneInput!
}

input SessionCreateOneInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
}

type SessionPreviousValues {
  id: ID!
  index: Int!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateDataInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateManyMutationInput {
  index: Int
}

input SessionUpdateOneRequiredInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateDataInput
  upsert: SessionUpsertNestedInput
}

input SessionUpsertNestedInput {
  update: SessionUpdateDataInput!
  create: SessionCreateInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  start: BlockNumberWhereInput
}

input SessionWhereUniqueInput {
  id: ID
  index: Int
}

type Slashing implements Node {
  id: ID!
  blockNumber: BlockNumber!
  who: String!
  amount: String!
}

"""A connection to a list of items."""
type SlashingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SlashingEdge]!
  aggregate: AggregateSlashing!
}

input SlashingCreateInput {
  id: ID
  who: String!
  amount: String!
  blockNumber: BlockNumberCreateOneInput!
}

"""An edge in a connection."""
type SlashingEdge {
  """The item at the end of the edge."""
  node: Slashing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SlashingOrderByInput {
  id_ASC
  id_DESC
  who_ASC
  who_DESC
  amount_ASC
  amount_DESC
}

type SlashingPreviousValues {
  id: ID!
  who: String!
  amount: String!
}

type SlashingSubscriptionPayload {
  mutation: MutationType!
  node: Slashing
  updatedFields: [String!]
  previousValues: SlashingPreviousValues
}

input SlashingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SlashingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SlashingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SlashingSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SlashingWhereInput
}

input SlashingUpdateInput {
  who: String
  amount: String
  blockNumber: BlockNumberUpdateOneRequiredInput
}

input SlashingUpdateManyMutationInput {
  who: String
  amount: String
}

input SlashingWhereInput {
  """Logical AND on all given filters."""
  AND: [SlashingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SlashingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SlashingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  who: String

  """All values that are not equal to given value."""
  who_not: String

  """All values that are contained in given list."""
  who_in: [String!]

  """All values that are not contained in given list."""
  who_not_in: [String!]

  """All values less than the given value."""
  who_lt: String

  """All values less than or equal the given value."""
  who_lte: String

  """All values greater than the given value."""
  who_gt: String

  """All values greater than or equal the given value."""
  who_gte: String

  """All values containing the given string."""
  who_contains: String

  """All values not containing the given string."""
  who_not_contains: String

  """All values starting with the given string."""
  who_starts_with: String

  """All values not starting with the given string."""
  who_not_starts_with: String

  """All values ending with the given string."""
  who_ends_with: String

  """All values not ending with the given string."""
  who_not_ends_with: String
  amount: String

  """All values that are not equal to given value."""
  amount_not: String

  """All values that are contained in given list."""
  amount_in: [String!]

  """All values that are not contained in given list."""
  amount_not_in: [String!]

  """All values less than the given value."""
  amount_lt: String

  """All values less than or equal the given value."""
  amount_lte: String

  """All values greater than the given value."""
  amount_gt: String

  """All values greater than or equal the given value."""
  amount_gte: String

  """All values containing the given string."""
  amount_contains: String

  """All values not containing the given string."""
  amount_not_contains: String

  """All values starting with the given string."""
  amount_starts_with: String

  """All values not starting with the given string."""
  amount_not_starts_with: String

  """All values ending with the given string."""
  amount_ends_with: String

  """All values not ending with the given string."""
  amount_not_ends_with: String
  blockNumber: BlockNumberWhereInput
}

input SlashingWhereUniqueInput {
  id: ID
  who: String
}

type Stake implements Node {
  id: ID!
  blockNumber: BlockNumber!
  totalStake: String!
}

"""A connection to a list of items."""
type StakeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StakeEdge]!
  aggregate: AggregateStake!
}

input StakeCreateInput {
  id: ID
  totalStake: String!
  blockNumber: BlockNumberCreateOneInput!
}

"""An edge in a connection."""
type StakeEdge {
  """The item at the end of the edge."""
  node: Stake!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StakeOrderByInput {
  id_ASC
  id_DESC
  totalStake_ASC
  totalStake_DESC
}

type StakePreviousValues {
  id: ID!
  totalStake: String!
}

type StakeSubscriptionPayload {
  mutation: MutationType!
  node: Stake
  updatedFields: [String!]
  previousValues: StakePreviousValues
}

input StakeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StakeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StakeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StakeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StakeWhereInput
}

input StakeUpdateInput {
  totalStake: String
  blockNumber: BlockNumberUpdateOneRequiredInput
}

input StakeUpdateManyMutationInput {
  totalStake: String
}

input StakeWhereInput {
  """Logical AND on all given filters."""
  AND: [StakeWhereInput!]

  """Logical OR on all given filters."""
  OR: [StakeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StakeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  totalStake: String

  """All values that are not equal to given value."""
  totalStake_not: String

  """All values that are contained in given list."""
  totalStake_in: [String!]

  """All values that are not contained in given list."""
  totalStake_not_in: [String!]

  """All values less than the given value."""
  totalStake_lt: String

  """All values less than or equal the given value."""
  totalStake_lte: String

  """All values greater than the given value."""
  totalStake_gt: String

  """All values greater than or equal the given value."""
  totalStake_gte: String

  """All values containing the given string."""
  totalStake_contains: String

  """All values not containing the given string."""
  totalStake_not_contains: String

  """All values starting with the given string."""
  totalStake_starts_with: String

  """All values not starting with the given string."""
  totalStake_not_starts_with: String

  """All values ending with the given string."""
  totalStake_ends_with: String

  """All values not ending with the given string."""
  totalStake_not_ends_with: String
  blockNumber: BlockNumberWhereInput
}

input StakeWhereUniqueInput {
  id: ID
}

type Subscription {
  era(where: EraSubscriptionWhereInput): EraSubscriptionPayload
  slashing(where: SlashingSubscriptionWhereInput): SlashingSubscriptionPayload
  validator(where: ValidatorSubscriptionWhereInput): ValidatorSubscriptionPayload
  totalIssuance(where: TotalIssuanceSubscriptionWhereInput): TotalIssuanceSubscriptionPayload
  reward(where: RewardSubscriptionWhereInput): RewardSubscriptionPayload
  nomination(where: NominationSubscriptionWhereInput): NominationSubscriptionPayload
  stake(where: StakeSubscriptionWhereInput): StakeSubscriptionPayload
  blockNumber(where: BlockNumberSubscriptionWhereInput): BlockNumberSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
}

type TotalIssuance implements Node {
  id: ID!
  blockNumber: BlockNumber!
  amount: String!
}

"""A connection to a list of items."""
type TotalIssuanceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TotalIssuanceEdge]!
  aggregate: AggregateTotalIssuance!
}

input TotalIssuanceCreateInput {
  id: ID
  amount: String!
  blockNumber: BlockNumberCreateOneInput!
}

"""An edge in a connection."""
type TotalIssuanceEdge {
  """The item at the end of the edge."""
  node: TotalIssuance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TotalIssuanceOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type TotalIssuancePreviousValues {
  id: ID!
  amount: String!
}

type TotalIssuanceSubscriptionPayload {
  mutation: MutationType!
  node: TotalIssuance
  updatedFields: [String!]
  previousValues: TotalIssuancePreviousValues
}

input TotalIssuanceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TotalIssuanceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TotalIssuanceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TotalIssuanceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TotalIssuanceWhereInput
}

input TotalIssuanceUpdateInput {
  amount: String
  blockNumber: BlockNumberUpdateOneRequiredInput
}

input TotalIssuanceUpdateManyMutationInput {
  amount: String
}

input TotalIssuanceWhereInput {
  """Logical AND on all given filters."""
  AND: [TotalIssuanceWhereInput!]

  """Logical OR on all given filters."""
  OR: [TotalIssuanceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TotalIssuanceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: String

  """All values that are not equal to given value."""
  amount_not: String

  """All values that are contained in given list."""
  amount_in: [String!]

  """All values that are not contained in given list."""
  amount_not_in: [String!]

  """All values less than the given value."""
  amount_lt: String

  """All values less than or equal the given value."""
  amount_lte: String

  """All values greater than the given value."""
  amount_gt: String

  """All values greater than or equal the given value."""
  amount_gte: String

  """All values containing the given string."""
  amount_contains: String

  """All values not containing the given string."""
  amount_not_contains: String

  """All values starting with the given string."""
  amount_starts_with: String

  """All values not starting with the given string."""
  amount_not_starts_with: String

  """All values ending with the given string."""
  amount_ends_with: String

  """All values not ending with the given string."""
  amount_not_ends_with: String
  blockNumber: BlockNumberWhereInput
}

input TotalIssuanceWhereUniqueInput {
  id: ID
}

type Validator implements Node {
  id: ID!
  session: Session!
  controller: String!
  stash: String!
  preferences: String!
}

"""A connection to a list of items."""
type ValidatorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ValidatorEdge]!
  aggregate: AggregateValidator!
}

input ValidatorCreateInput {
  id: ID
  controller: String!
  stash: String!
  preferences: String!
  session: SessionCreateOneInput!
}

"""An edge in a connection."""
type ValidatorEdge {
  """The item at the end of the edge."""
  node: Validator!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ValidatorOrderByInput {
  id_ASC
  id_DESC
  controller_ASC
  controller_DESC
  stash_ASC
  stash_DESC
  preferences_ASC
  preferences_DESC
}

type ValidatorPreviousValues {
  id: ID!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorSubscriptionPayload {
  mutation: MutationType!
  node: Validator
  updatedFields: [String!]
  previousValues: ValidatorPreviousValues
}

input ValidatorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ValidatorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ValidatorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ValidatorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ValidatorWhereInput
}

input ValidatorUpdateInput {
  controller: String
  stash: String
  preferences: String
  session: SessionUpdateOneRequiredInput
}

input ValidatorUpdateManyMutationInput {
  controller: String
  stash: String
  preferences: String
}

input ValidatorWhereInput {
  """Logical AND on all given filters."""
  AND: [ValidatorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ValidatorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ValidatorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  controller: String

  """All values that are not equal to given value."""
  controller_not: String

  """All values that are contained in given list."""
  controller_in: [String!]

  """All values that are not contained in given list."""
  controller_not_in: [String!]

  """All values less than the given value."""
  controller_lt: String

  """All values less than or equal the given value."""
  controller_lte: String

  """All values greater than the given value."""
  controller_gt: String

  """All values greater than or equal the given value."""
  controller_gte: String

  """All values containing the given string."""
  controller_contains: String

  """All values not containing the given string."""
  controller_not_contains: String

  """All values starting with the given string."""
  controller_starts_with: String

  """All values not starting with the given string."""
  controller_not_starts_with: String

  """All values ending with the given string."""
  controller_ends_with: String

  """All values not ending with the given string."""
  controller_not_ends_with: String
  stash: String

  """All values that are not equal to given value."""
  stash_not: String

  """All values that are contained in given list."""
  stash_in: [String!]

  """All values that are not contained in given list."""
  stash_not_in: [String!]

  """All values less than the given value."""
  stash_lt: String

  """All values less than or equal the given value."""
  stash_lte: String

  """All values greater than the given value."""
  stash_gt: String

  """All values greater than or equal the given value."""
  stash_gte: String

  """All values containing the given string."""
  stash_contains: String

  """All values not containing the given string."""
  stash_not_contains: String

  """All values starting with the given string."""
  stash_starts_with: String

  """All values not starting with the given string."""
  stash_not_starts_with: String

  """All values ending with the given string."""
  stash_ends_with: String

  """All values not ending with the given string."""
  stash_not_ends_with: String
  preferences: String

  """All values that are not equal to given value."""
  preferences_not: String

  """All values that are contained in given list."""
  preferences_in: [String!]

  """All values that are not contained in given list."""
  preferences_not_in: [String!]

  """All values less than the given value."""
  preferences_lt: String

  """All values less than or equal the given value."""
  preferences_lte: String

  """All values greater than the given value."""
  preferences_gt: String

  """All values greater than or equal the given value."""
  preferences_gte: String

  """All values containing the given string."""
  preferences_contains: String

  """All values not containing the given string."""
  preferences_not_contains: String

  """All values starting with the given string."""
  preferences_starts_with: String

  """All values not starting with the given string."""
  preferences_not_starts_with: String

  """All values ending with the given string."""
  preferences_ends_with: String

  """All values not ending with the given string."""
  preferences_not_ends_with: String
  session: SessionWhereInput
}

input ValidatorWhereUniqueInput {
  id: ID
}
