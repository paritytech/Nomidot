// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBlockNumber {
  count: Int!
}

type AggregateEra {
  count: Int!
}

type AggregateNomination {
  count: Int!
}

type AggregateProposal {
  count: Int!
}

type AggregateProposalArgument {
  count: Int!
}

type AggregateReward {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSlashing {
  count: Int!
}

type AggregateStake {
  count: Int!
}

type AggregateTotalIssuance {
  count: Int!
}

type AggregateValidator {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BlockNumber {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

type BlockNumberConnection {
  pageInfo: PageInfo!
  edges: [BlockNumberEdge]!
  aggregate: AggregateBlockNumber!
}

input BlockNumberCreateInput {
  id: ID
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

input BlockNumberCreateOneInput {
  create: BlockNumberCreateInput
  connect: BlockNumberWhereUniqueInput
}

type BlockNumberEdge {
  node: BlockNumber!
  cursor: String!
}

enum BlockNumberOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  authoredBy_ASC
  authoredBy_DESC
  startDateTime_ASC
  startDateTime_DESC
  hash_ASC
  hash_DESC
}

type BlockNumberPreviousValues {
  id: ID!
  number: Int!
  authoredBy: String!
  startDateTime: DateTime!
  hash: String!
}

type BlockNumberSubscriptionPayload {
  mutation: MutationType!
  node: BlockNumber
  updatedFields: [String!]
  previousValues: BlockNumberPreviousValues
}

input BlockNumberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockNumberWhereInput
  AND: [BlockNumberSubscriptionWhereInput!]
  OR: [BlockNumberSubscriptionWhereInput!]
  NOT: [BlockNumberSubscriptionWhereInput!]
}

input BlockNumberUpdateDataInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateManyMutationInput {
  number: Int
  authoredBy: String
  startDateTime: DateTime
  hash: String
}

input BlockNumberUpdateOneRequiredInput {
  create: BlockNumberCreateInput
  update: BlockNumberUpdateDataInput
  upsert: BlockNumberUpsertNestedInput
  connect: BlockNumberWhereUniqueInput
}

input BlockNumberUpsertNestedInput {
  update: BlockNumberUpdateDataInput!
  create: BlockNumberCreateInput!
}

input BlockNumberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  authoredBy: String
  authoredBy_not: String
  authoredBy_in: [String!]
  authoredBy_not_in: [String!]
  authoredBy_lt: String
  authoredBy_lte: String
  authoredBy_gt: String
  authoredBy_gte: String
  authoredBy_contains: String
  authoredBy_not_contains: String
  authoredBy_starts_with: String
  authoredBy_not_starts_with: String
  authoredBy_ends_with: String
  authoredBy_not_ends_with: String
  startDateTime: DateTime
  startDateTime_not: DateTime
  startDateTime_in: [DateTime!]
  startDateTime_not_in: [DateTime!]
  startDateTime_lt: DateTime
  startDateTime_lte: DateTime
  startDateTime_gt: DateTime
  startDateTime_gte: DateTime
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  AND: [BlockNumberWhereInput!]
  OR: [BlockNumberWhereInput!]
  NOT: [BlockNumberWhereInput!]
}

input BlockNumberWhereUniqueInput {
  id: ID
  number: Int
  hash: String
}

scalar DateTime

type Era {
  id: ID!
  index: Int!
  eraStartSessionIndex: Session!
  totalPoints: String!
  individualPoints: [String!]!
}

type EraConnection {
  pageInfo: PageInfo!
  edges: [EraEdge]!
  aggregate: AggregateEra!
}

input EraCreateindividualPointsInput {
  set: [String!]
}

input EraCreateInput {
  id: ID
  index: Int!
  eraStartSessionIndex: SessionCreateOneInput!
  totalPoints: String!
  individualPoints: EraCreateindividualPointsInput
}

type EraEdge {
  node: Era!
  cursor: String!
}

enum EraOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  totalPoints_ASC
  totalPoints_DESC
}

type EraPreviousValues {
  id: ID!
  index: Int!
  totalPoints: String!
  individualPoints: [String!]!
}

type EraSubscriptionPayload {
  mutation: MutationType!
  node: Era
  updatedFields: [String!]
  previousValues: EraPreviousValues
}

input EraSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EraWhereInput
  AND: [EraSubscriptionWhereInput!]
  OR: [EraSubscriptionWhereInput!]
  NOT: [EraSubscriptionWhereInput!]
}

input EraUpdateindividualPointsInput {
  set: [String!]
}

input EraUpdateInput {
  index: Int
  eraStartSessionIndex: SessionUpdateOneRequiredInput
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
}

input EraUpdateManyMutationInput {
  index: Int
  totalPoints: String
  individualPoints: EraUpdateindividualPointsInput
}

input EraWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  eraStartSessionIndex: SessionWhereInput
  totalPoints: String
  totalPoints_not: String
  totalPoints_in: [String!]
  totalPoints_not_in: [String!]
  totalPoints_lt: String
  totalPoints_lte: String
  totalPoints_gt: String
  totalPoints_gte: String
  totalPoints_contains: String
  totalPoints_not_contains: String
  totalPoints_starts_with: String
  totalPoints_not_starts_with: String
  totalPoints_ends_with: String
  totalPoints_not_ends_with: String
  AND: [EraWhereInput!]
  OR: [EraWhereInput!]
  NOT: [EraWhereInput!]
}

input EraWhereUniqueInput {
  id: ID
  index: Int
}

scalar Long

type Mutation {
  createBlockNumber(data: BlockNumberCreateInput!): BlockNumber!
  updateBlockNumber(data: BlockNumberUpdateInput!, where: BlockNumberWhereUniqueInput!): BlockNumber
  updateManyBlockNumbers(data: BlockNumberUpdateManyMutationInput!, where: BlockNumberWhereInput): BatchPayload!
  upsertBlockNumber(where: BlockNumberWhereUniqueInput!, create: BlockNumberCreateInput!, update: BlockNumberUpdateInput!): BlockNumber!
  deleteBlockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  deleteManyBlockNumbers(where: BlockNumberWhereInput): BatchPayload!
  createEra(data: EraCreateInput!): Era!
  updateEra(data: EraUpdateInput!, where: EraWhereUniqueInput!): Era
  updateManyEras(data: EraUpdateManyMutationInput!, where: EraWhereInput): BatchPayload!
  upsertEra(where: EraWhereUniqueInput!, create: EraCreateInput!, update: EraUpdateInput!): Era!
  deleteEra(where: EraWhereUniqueInput!): Era
  deleteManyEras(where: EraWhereInput): BatchPayload!
  createNomination(data: NominationCreateInput!): Nomination!
  updateNomination(data: NominationUpdateInput!, where: NominationWhereUniqueInput!): Nomination
  updateManyNominations(data: NominationUpdateManyMutationInput!, where: NominationWhereInput): BatchPayload!
  upsertNomination(where: NominationWhereUniqueInput!, create: NominationCreateInput!, update: NominationUpdateInput!): Nomination!
  deleteNomination(where: NominationWhereUniqueInput!): Nomination
  deleteManyNominations(where: NominationWhereInput): BatchPayload!
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateManyProposals(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  upsertProposal(where: ProposalWhereUniqueInput!, create: ProposalCreateInput!, update: ProposalUpdateInput!): Proposal!
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteManyProposals(where: ProposalWhereInput): BatchPayload!
  createProposalArgument(data: ProposalArgumentCreateInput!): ProposalArgument!
  updateProposalArgument(data: ProposalArgumentUpdateInput!, where: ProposalArgumentWhereUniqueInput!): ProposalArgument
  updateManyProposalArguments(data: ProposalArgumentUpdateManyMutationInput!, where: ProposalArgumentWhereInput): BatchPayload!
  upsertProposalArgument(where: ProposalArgumentWhereUniqueInput!, create: ProposalArgumentCreateInput!, update: ProposalArgumentUpdateInput!): ProposalArgument!
  deleteProposalArgument(where: ProposalArgumentWhereUniqueInput!): ProposalArgument
  deleteManyProposalArguments(where: ProposalArgumentWhereInput): BatchPayload!
  createReward(data: RewardCreateInput!): Reward!
  updateReward(data: RewardUpdateInput!, where: RewardWhereUniqueInput!): Reward
  updateManyRewards(data: RewardUpdateManyMutationInput!, where: RewardWhereInput): BatchPayload!
  upsertReward(where: RewardWhereUniqueInput!, create: RewardCreateInput!, update: RewardUpdateInput!): Reward!
  deleteReward(where: RewardWhereUniqueInput!): Reward
  deleteManyRewards(where: RewardWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createSlashing(data: SlashingCreateInput!): Slashing!
  updateSlashing(data: SlashingUpdateInput!, where: SlashingWhereUniqueInput!): Slashing
  updateManySlashings(data: SlashingUpdateManyMutationInput!, where: SlashingWhereInput): BatchPayload!
  upsertSlashing(where: SlashingWhereUniqueInput!, create: SlashingCreateInput!, update: SlashingUpdateInput!): Slashing!
  deleteSlashing(where: SlashingWhereUniqueInput!): Slashing
  deleteManySlashings(where: SlashingWhereInput): BatchPayload!
  createStake(data: StakeCreateInput!): Stake!
  updateStake(data: StakeUpdateInput!, where: StakeWhereUniqueInput!): Stake
  updateManyStakes(data: StakeUpdateManyMutationInput!, where: StakeWhereInput): BatchPayload!
  upsertStake(where: StakeWhereUniqueInput!, create: StakeCreateInput!, update: StakeUpdateInput!): Stake!
  deleteStake(where: StakeWhereUniqueInput!): Stake
  deleteManyStakes(where: StakeWhereInput): BatchPayload!
  createTotalIssuance(data: TotalIssuanceCreateInput!): TotalIssuance!
  updateTotalIssuance(data: TotalIssuanceUpdateInput!, where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  updateManyTotalIssuances(data: TotalIssuanceUpdateManyMutationInput!, where: TotalIssuanceWhereInput): BatchPayload!
  upsertTotalIssuance(where: TotalIssuanceWhereUniqueInput!, create: TotalIssuanceCreateInput!, update: TotalIssuanceUpdateInput!): TotalIssuance!
  deleteTotalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  deleteManyTotalIssuances(where: TotalIssuanceWhereInput): BatchPayload!
  createValidator(data: ValidatorCreateInput!): Validator!
  updateValidator(data: ValidatorUpdateInput!, where: ValidatorWhereUniqueInput!): Validator
  updateManyValidators(data: ValidatorUpdateManyMutationInput!, where: ValidatorWhereInput): BatchPayload!
  upsertValidator(where: ValidatorWhereUniqueInput!, create: ValidatorCreateInput!, update: ValidatorUpdateInput!): Validator!
  deleteValidator(where: ValidatorWhereUniqueInput!): Validator
  deleteManyValidators(where: ValidatorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Nomination {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  session: Session!
  bonded: String!
}

type NominationConnection {
  pageInfo: PageInfo!
  edges: [NominationEdge]!
  aggregate: AggregateNomination!
}

input NominationCreateInput {
  id: ID
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  session: SessionCreateOneInput!
  bonded: String!
}

type NominationEdge {
  node: Nomination!
  cursor: String!
}

enum NominationOrderByInput {
  id_ASC
  id_DESC
  validatorController_ASC
  validatorController_DESC
  validatorStash_ASC
  validatorStash_DESC
  nominatorController_ASC
  nominatorController_DESC
  nominatorStash_ASC
  nominatorStash_DESC
  bonded_ASC
  bonded_DESC
}

type NominationPreviousValues {
  id: ID!
  validatorController: String!
  validatorStash: String!
  nominatorController: String!
  nominatorStash: String!
  bonded: String!
}

type NominationSubscriptionPayload {
  mutation: MutationType!
  node: Nomination
  updatedFields: [String!]
  previousValues: NominationPreviousValues
}

input NominationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NominationWhereInput
  AND: [NominationSubscriptionWhereInput!]
  OR: [NominationSubscriptionWhereInput!]
  NOT: [NominationSubscriptionWhereInput!]
}

input NominationUpdateInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  session: SessionUpdateOneRequiredInput
  bonded: String
}

input NominationUpdateManyMutationInput {
  validatorController: String
  validatorStash: String
  nominatorController: String
  nominatorStash: String
  bonded: String
}

input NominationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  validatorController: String
  validatorController_not: String
  validatorController_in: [String!]
  validatorController_not_in: [String!]
  validatorController_lt: String
  validatorController_lte: String
  validatorController_gt: String
  validatorController_gte: String
  validatorController_contains: String
  validatorController_not_contains: String
  validatorController_starts_with: String
  validatorController_not_starts_with: String
  validatorController_ends_with: String
  validatorController_not_ends_with: String
  validatorStash: String
  validatorStash_not: String
  validatorStash_in: [String!]
  validatorStash_not_in: [String!]
  validatorStash_lt: String
  validatorStash_lte: String
  validatorStash_gt: String
  validatorStash_gte: String
  validatorStash_contains: String
  validatorStash_not_contains: String
  validatorStash_starts_with: String
  validatorStash_not_starts_with: String
  validatorStash_ends_with: String
  validatorStash_not_ends_with: String
  nominatorController: String
  nominatorController_not: String
  nominatorController_in: [String!]
  nominatorController_not_in: [String!]
  nominatorController_lt: String
  nominatorController_lte: String
  nominatorController_gt: String
  nominatorController_gte: String
  nominatorController_contains: String
  nominatorController_not_contains: String
  nominatorController_starts_with: String
  nominatorController_not_starts_with: String
  nominatorController_ends_with: String
  nominatorController_not_ends_with: String
  nominatorStash: String
  nominatorStash_not: String
  nominatorStash_in: [String!]
  nominatorStash_not_in: [String!]
  nominatorStash_lt: String
  nominatorStash_lte: String
  nominatorStash_gt: String
  nominatorStash_gte: String
  nominatorStash_contains: String
  nominatorStash_not_contains: String
  nominatorStash_starts_with: String
  nominatorStash_not_starts_with: String
  nominatorStash_ends_with: String
  nominatorStash_not_ends_with: String
  session: SessionWhereInput
  bonded: String
  bonded_not: String
  bonded_in: [String!]
  bonded_not_in: [String!]
  bonded_lt: String
  bonded_lte: String
  bonded_gt: String
  bonded_gte: String
  bonded_contains: String
  bonded_not_contains: String
  bonded_starts_with: String
  bonded_not_starts_with: String
  bonded_ends_with: String
  bonded_not_ends_with: String
  AND: [NominationWhereInput!]
  OR: [NominationWhereInput!]
  NOT: [NominationWhereInput!]
}

input NominationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Proposal {
  id: Int!
  blockNumber: BlockNumber!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  proposal: String!
  proposalArguments(where: ProposalArgumentWhereInput, orderBy: ProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalArgument!]
  proposalId: Int!
  proposer: String!
  section: String!
}

type ProposalArgument {
  id: ID!
  name: String!
  proposal: Proposal!
  value: String!
}

type ProposalArgumentConnection {
  pageInfo: PageInfo!
  edges: [ProposalArgumentEdge]!
  aggregate: AggregateProposalArgument!
}

input ProposalArgumentCreateInput {
  id: ID
  name: String!
  proposal: ProposalCreateOneWithoutProposalArgumentsInput!
  value: String!
}

input ProposalArgumentCreateManyWithoutProposalInput {
  create: [ProposalArgumentCreateWithoutProposalInput!]
  connect: [ProposalArgumentWhereUniqueInput!]
}

input ProposalArgumentCreateWithoutProposalInput {
  id: ID
  name: String!
  value: String!
}

type ProposalArgumentEdge {
  node: ProposalArgument!
  cursor: String!
}

enum ProposalArgumentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
}

type ProposalArgumentPreviousValues {
  id: ID!
  name: String!
  value: String!
}

input ProposalArgumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ProposalArgumentScalarWhereInput!]
  OR: [ProposalArgumentScalarWhereInput!]
  NOT: [ProposalArgumentScalarWhereInput!]
}

type ProposalArgumentSubscriptionPayload {
  mutation: MutationType!
  node: ProposalArgument
  updatedFields: [String!]
  previousValues: ProposalArgumentPreviousValues
}

input ProposalArgumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalArgumentWhereInput
  AND: [ProposalArgumentSubscriptionWhereInput!]
  OR: [ProposalArgumentSubscriptionWhereInput!]
  NOT: [ProposalArgumentSubscriptionWhereInput!]
}

input ProposalArgumentUpdateInput {
  name: String
  proposal: ProposalUpdateOneRequiredWithoutProposalArgumentsInput
  value: String
}

input ProposalArgumentUpdateManyDataInput {
  name: String
  value: String
}

input ProposalArgumentUpdateManyMutationInput {
  name: String
  value: String
}

input ProposalArgumentUpdateManyWithoutProposalInput {
  create: [ProposalArgumentCreateWithoutProposalInput!]
  delete: [ProposalArgumentWhereUniqueInput!]
  connect: [ProposalArgumentWhereUniqueInput!]
  set: [ProposalArgumentWhereUniqueInput!]
  disconnect: [ProposalArgumentWhereUniqueInput!]
  update: [ProposalArgumentUpdateWithWhereUniqueWithoutProposalInput!]
  upsert: [ProposalArgumentUpsertWithWhereUniqueWithoutProposalInput!]
  deleteMany: [ProposalArgumentScalarWhereInput!]
  updateMany: [ProposalArgumentUpdateManyWithWhereNestedInput!]
}

input ProposalArgumentUpdateManyWithWhereNestedInput {
  where: ProposalArgumentScalarWhereInput!
  data: ProposalArgumentUpdateManyDataInput!
}

input ProposalArgumentUpdateWithoutProposalDataInput {
  name: String
  value: String
}

input ProposalArgumentUpdateWithWhereUniqueWithoutProposalInput {
  where: ProposalArgumentWhereUniqueInput!
  data: ProposalArgumentUpdateWithoutProposalDataInput!
}

input ProposalArgumentUpsertWithWhereUniqueWithoutProposalInput {
  where: ProposalArgumentWhereUniqueInput!
  update: ProposalArgumentUpdateWithoutProposalDataInput!
  create: ProposalArgumentCreateWithoutProposalInput!
}

input ProposalArgumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  proposal: ProposalWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ProposalArgumentWhereInput!]
  OR: [ProposalArgumentWhereInput!]
  NOT: [ProposalArgumentWhereInput!]
}

input ProposalArgumentWhereUniqueInput {
  id: ID
}

type ProposalConnection {
  pageInfo: PageInfo!
  edges: [ProposalEdge]!
  aggregate: AggregateProposal!
}

input ProposalCreateInput {
  blockNumber: BlockNumberCreateOneInput!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  proposal: String!
  proposalArguments: ProposalArgumentCreateManyWithoutProposalInput
  proposalId: Int!
  proposer: String!
  section: String!
}

input ProposalCreateOneWithoutProposalArgumentsInput {
  create: ProposalCreateWithoutProposalArgumentsInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateWithoutProposalArgumentsInput {
  blockNumber: BlockNumberCreateOneInput!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  proposal: String!
  proposalId: Int!
  proposer: String!
  section: String!
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

enum ProposalOrderByInput {
  id_ASC
  id_DESC
  depositAmount_ASC
  depositAmount_DESC
  hash_ASC
  hash_DESC
  metaDescription_ASC
  metaDescription_DESC
  method_ASC
  method_DESC
  proposal_ASC
  proposal_DESC
  proposalId_ASC
  proposalId_DESC
  proposer_ASC
  proposer_DESC
  section_ASC
  section_DESC
}

type ProposalPreviousValues {
  id: Int!
  depositAmount: String!
  hash: String!
  metaDescription: String!
  method: String!
  proposal: String!
  proposalId: Int!
  proposer: String!
  section: String!
}

type ProposalSubscriptionPayload {
  mutation: MutationType!
  node: Proposal
  updatedFields: [String!]
  previousValues: ProposalPreviousValues
}

input ProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalWhereInput
  AND: [ProposalSubscriptionWhereInput!]
  OR: [ProposalSubscriptionWhereInput!]
  NOT: [ProposalSubscriptionWhereInput!]
}

input ProposalUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  proposal: String
  proposalArguments: ProposalArgumentUpdateManyWithoutProposalInput
  proposalId: Int
  proposer: String
  section: String
}

input ProposalUpdateManyMutationInput {
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  proposal: String
  proposalId: Int
  proposer: String
  section: String
}

input ProposalUpdateOneRequiredWithoutProposalArgumentsInput {
  create: ProposalCreateWithoutProposalArgumentsInput
  update: ProposalUpdateWithoutProposalArgumentsDataInput
  upsert: ProposalUpsertWithoutProposalArgumentsInput
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateWithoutProposalArgumentsDataInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  depositAmount: String
  hash: String
  metaDescription: String
  method: String
  proposal: String
  proposalId: Int
  proposer: String
  section: String
}

input ProposalUpsertWithoutProposalArgumentsInput {
  update: ProposalUpdateWithoutProposalArgumentsDataInput!
  create: ProposalCreateWithoutProposalArgumentsInput!
}

input ProposalWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blockNumber: BlockNumberWhereInput
  depositAmount: String
  depositAmount_not: String
  depositAmount_in: [String!]
  depositAmount_not_in: [String!]
  depositAmount_lt: String
  depositAmount_lte: String
  depositAmount_gt: String
  depositAmount_gte: String
  depositAmount_contains: String
  depositAmount_not_contains: String
  depositAmount_starts_with: String
  depositAmount_not_starts_with: String
  depositAmount_ends_with: String
  depositAmount_not_ends_with: String
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  metaDescription: String
  metaDescription_not: String
  metaDescription_in: [String!]
  metaDescription_not_in: [String!]
  metaDescription_lt: String
  metaDescription_lte: String
  metaDescription_gt: String
  metaDescription_gte: String
  metaDescription_contains: String
  metaDescription_not_contains: String
  metaDescription_starts_with: String
  metaDescription_not_starts_with: String
  metaDescription_ends_with: String
  metaDescription_not_ends_with: String
  method: String
  method_not: String
  method_in: [String!]
  method_not_in: [String!]
  method_lt: String
  method_lte: String
  method_gt: String
  method_gte: String
  method_contains: String
  method_not_contains: String
  method_starts_with: String
  method_not_starts_with: String
  method_ends_with: String
  method_not_ends_with: String
  proposal: String
  proposal_not: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_lt: String
  proposal_lte: String
  proposal_gt: String
  proposal_gte: String
  proposal_contains: String
  proposal_not_contains: String
  proposal_starts_with: String
  proposal_not_starts_with: String
  proposal_ends_with: String
  proposal_not_ends_with: String
  proposalArguments_every: ProposalArgumentWhereInput
  proposalArguments_some: ProposalArgumentWhereInput
  proposalArguments_none: ProposalArgumentWhereInput
  proposalId: Int
  proposalId_not: Int
  proposalId_in: [Int!]
  proposalId_not_in: [Int!]
  proposalId_lt: Int
  proposalId_lte: Int
  proposalId_gt: Int
  proposalId_gte: Int
  proposer: String
  proposer_not: String
  proposer_in: [String!]
  proposer_not_in: [String!]
  proposer_lt: String
  proposer_lte: String
  proposer_gt: String
  proposer_gte: String
  proposer_contains: String
  proposer_not_contains: String
  proposer_starts_with: String
  proposer_not_starts_with: String
  proposer_ends_with: String
  proposer_not_ends_with: String
  section: String
  section_not: String
  section_in: [String!]
  section_not_in: [String!]
  section_lt: String
  section_lte: String
  section_gt: String
  section_gte: String
  section_contains: String
  section_not_contains: String
  section_starts_with: String
  section_not_starts_with: String
  section_ends_with: String
  section_not_ends_with: String
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  NOT: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: Int
  proposalId: Int
}

type Query {
  blockNumber(where: BlockNumberWhereUniqueInput!): BlockNumber
  blockNumbers(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockNumber]!
  blockNumbersConnection(where: BlockNumberWhereInput, orderBy: BlockNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockNumberConnection!
  era(where: EraWhereUniqueInput!): Era
  eras(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Era]!
  erasConnection(where: EraWhereInput, orderBy: EraOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EraConnection!
  nomination(where: NominationWhereUniqueInput!): Nomination
  nominations(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nomination]!
  nominationsConnection(where: NominationWhereInput, orderBy: NominationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NominationConnection!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  proposalsConnection(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalConnection!
  proposalArgument(where: ProposalArgumentWhereUniqueInput!): ProposalArgument
  proposalArguments(where: ProposalArgumentWhereInput, orderBy: ProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalArgument]!
  proposalArgumentsConnection(where: ProposalArgumentWhereInput, orderBy: ProposalArgumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalArgumentConnection!
  reward(where: RewardWhereUniqueInput!): Reward
  rewards(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reward]!
  rewardsConnection(where: RewardWhereInput, orderBy: RewardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RewardConnection!
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  slashing(where: SlashingWhereUniqueInput!): Slashing
  slashings(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slashing]!
  slashingsConnection(where: SlashingWhereInput, orderBy: SlashingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SlashingConnection!
  stake(where: StakeWhereUniqueInput!): Stake
  stakes(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stake]!
  stakesConnection(where: StakeWhereInput, orderBy: StakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StakeConnection!
  totalIssuance(where: TotalIssuanceWhereUniqueInput!): TotalIssuance
  totalIssuances(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TotalIssuance]!
  totalIssuancesConnection(where: TotalIssuanceWhereInput, orderBy: TotalIssuanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TotalIssuanceConnection!
  validator(where: ValidatorWhereUniqueInput!): Validator
  validators(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Validator]!
  validatorsConnection(where: ValidatorWhereInput, orderBy: ValidatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ValidatorConnection!
  node(id: ID!): Node
}

type Reward {
  id: ID!
  amount: String!
  authoredBlock: BlockNumber!
  recipients: [String!]!
}

type RewardConnection {
  pageInfo: PageInfo!
  edges: [RewardEdge]!
  aggregate: AggregateReward!
}

input RewardCreateInput {
  id: ID
  amount: String!
  authoredBlock: BlockNumberCreateOneInput!
  recipients: RewardCreaterecipientsInput
}

input RewardCreaterecipientsInput {
  set: [String!]
}

type RewardEdge {
  node: Reward!
  cursor: String!
}

enum RewardOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type RewardPreviousValues {
  id: ID!
  amount: String!
  recipients: [String!]!
}

type RewardSubscriptionPayload {
  mutation: MutationType!
  node: Reward
  updatedFields: [String!]
  previousValues: RewardPreviousValues
}

input RewardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RewardWhereInput
  AND: [RewardSubscriptionWhereInput!]
  OR: [RewardSubscriptionWhereInput!]
  NOT: [RewardSubscriptionWhereInput!]
}

input RewardUpdateInput {
  amount: String
  authoredBlock: BlockNumberUpdateOneRequiredInput
  recipients: RewardUpdaterecipientsInput
}

input RewardUpdateManyMutationInput {
  amount: String
  recipients: RewardUpdaterecipientsInput
}

input RewardUpdaterecipientsInput {
  set: [String!]
}

input RewardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  authoredBlock: BlockNumberWhereInput
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
}

input RewardWhereUniqueInput {
  id: ID
}

type Session {
  id: ID!
  index: Int!
  start: BlockNumber!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  index: Int!
  start: BlockNumberCreateOneInput!
}

input SessionCreateOneInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
}

type SessionPreviousValues {
  id: ID!
  index: Int!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateDataInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateInput {
  index: Int
  start: BlockNumberUpdateOneRequiredInput
}

input SessionUpdateManyMutationInput {
  index: Int
}

input SessionUpdateOneRequiredInput {
  create: SessionCreateInput
  update: SessionUpdateDataInput
  upsert: SessionUpsertNestedInput
  connect: SessionWhereUniqueInput
}

input SessionUpsertNestedInput {
  update: SessionUpdateDataInput!
  create: SessionCreateInput!
}

input SessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  start: BlockNumberWhereInput
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

input SessionWhereUniqueInput {
  id: ID
  index: Int
}

type Slashing {
  id: ID!
  blockNumber: BlockNumber!
  who: String!
  amount: String!
}

type SlashingConnection {
  pageInfo: PageInfo!
  edges: [SlashingEdge]!
  aggregate: AggregateSlashing!
}

input SlashingCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  who: String!
  amount: String!
}

type SlashingEdge {
  node: Slashing!
  cursor: String!
}

enum SlashingOrderByInput {
  id_ASC
  id_DESC
  who_ASC
  who_DESC
  amount_ASC
  amount_DESC
}

type SlashingPreviousValues {
  id: ID!
  who: String!
  amount: String!
}

type SlashingSubscriptionPayload {
  mutation: MutationType!
  node: Slashing
  updatedFields: [String!]
  previousValues: SlashingPreviousValues
}

input SlashingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SlashingWhereInput
  AND: [SlashingSubscriptionWhereInput!]
  OR: [SlashingSubscriptionWhereInput!]
  NOT: [SlashingSubscriptionWhereInput!]
}

input SlashingUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  who: String
  amount: String
}

input SlashingUpdateManyMutationInput {
  who: String
  amount: String
}

input SlashingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  who: String
  who_not: String
  who_in: [String!]
  who_not_in: [String!]
  who_lt: String
  who_lte: String
  who_gt: String
  who_gte: String
  who_contains: String
  who_not_contains: String
  who_starts_with: String
  who_not_starts_with: String
  who_ends_with: String
  who_not_ends_with: String
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  AND: [SlashingWhereInput!]
  OR: [SlashingWhereInput!]
  NOT: [SlashingWhereInput!]
}

input SlashingWhereUniqueInput {
  id: ID
  who: String
}

type Stake {
  id: ID!
  blockNumber: BlockNumber!
  totalStake: String!
}

type StakeConnection {
  pageInfo: PageInfo!
  edges: [StakeEdge]!
  aggregate: AggregateStake!
}

input StakeCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  totalStake: String!
}

type StakeEdge {
  node: Stake!
  cursor: String!
}

enum StakeOrderByInput {
  id_ASC
  id_DESC
  totalStake_ASC
  totalStake_DESC
}

type StakePreviousValues {
  id: ID!
  totalStake: String!
}

type StakeSubscriptionPayload {
  mutation: MutationType!
  node: Stake
  updatedFields: [String!]
  previousValues: StakePreviousValues
}

input StakeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StakeWhereInput
  AND: [StakeSubscriptionWhereInput!]
  OR: [StakeSubscriptionWhereInput!]
  NOT: [StakeSubscriptionWhereInput!]
}

input StakeUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  totalStake: String
}

input StakeUpdateManyMutationInput {
  totalStake: String
}

input StakeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  totalStake: String
  totalStake_not: String
  totalStake_in: [String!]
  totalStake_not_in: [String!]
  totalStake_lt: String
  totalStake_lte: String
  totalStake_gt: String
  totalStake_gte: String
  totalStake_contains: String
  totalStake_not_contains: String
  totalStake_starts_with: String
  totalStake_not_starts_with: String
  totalStake_ends_with: String
  totalStake_not_ends_with: String
  AND: [StakeWhereInput!]
  OR: [StakeWhereInput!]
  NOT: [StakeWhereInput!]
}

input StakeWhereUniqueInput {
  id: ID
}

type Subscription {
  blockNumber(where: BlockNumberSubscriptionWhereInput): BlockNumberSubscriptionPayload
  era(where: EraSubscriptionWhereInput): EraSubscriptionPayload
  nomination(where: NominationSubscriptionWhereInput): NominationSubscriptionPayload
  proposal(where: ProposalSubscriptionWhereInput): ProposalSubscriptionPayload
  proposalArgument(where: ProposalArgumentSubscriptionWhereInput): ProposalArgumentSubscriptionPayload
  reward(where: RewardSubscriptionWhereInput): RewardSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  slashing(where: SlashingSubscriptionWhereInput): SlashingSubscriptionPayload
  stake(where: StakeSubscriptionWhereInput): StakeSubscriptionPayload
  totalIssuance(where: TotalIssuanceSubscriptionWhereInput): TotalIssuanceSubscriptionPayload
  validator(where: ValidatorSubscriptionWhereInput): ValidatorSubscriptionPayload
}

type TotalIssuance {
  id: ID!
  blockNumber: BlockNumber!
  amount: String!
}

type TotalIssuanceConnection {
  pageInfo: PageInfo!
  edges: [TotalIssuanceEdge]!
  aggregate: AggregateTotalIssuance!
}

input TotalIssuanceCreateInput {
  id: ID
  blockNumber: BlockNumberCreateOneInput!
  amount: String!
}

type TotalIssuanceEdge {
  node: TotalIssuance!
  cursor: String!
}

enum TotalIssuanceOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type TotalIssuancePreviousValues {
  id: ID!
  amount: String!
}

type TotalIssuanceSubscriptionPayload {
  mutation: MutationType!
  node: TotalIssuance
  updatedFields: [String!]
  previousValues: TotalIssuancePreviousValues
}

input TotalIssuanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TotalIssuanceWhereInput
  AND: [TotalIssuanceSubscriptionWhereInput!]
  OR: [TotalIssuanceSubscriptionWhereInput!]
  NOT: [TotalIssuanceSubscriptionWhereInput!]
}

input TotalIssuanceUpdateInput {
  blockNumber: BlockNumberUpdateOneRequiredInput
  amount: String
}

input TotalIssuanceUpdateManyMutationInput {
  amount: String
}

input TotalIssuanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  blockNumber: BlockNumberWhereInput
  amount: String
  amount_not: String
  amount_in: [String!]
  amount_not_in: [String!]
  amount_lt: String
  amount_lte: String
  amount_gt: String
  amount_gte: String
  amount_contains: String
  amount_not_contains: String
  amount_starts_with: String
  amount_not_starts_with: String
  amount_ends_with: String
  amount_not_ends_with: String
  AND: [TotalIssuanceWhereInput!]
  OR: [TotalIssuanceWhereInput!]
  NOT: [TotalIssuanceWhereInput!]
}

input TotalIssuanceWhereUniqueInput {
  id: ID
}

type Validator {
  id: ID!
  session: Session!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorConnection {
  pageInfo: PageInfo!
  edges: [ValidatorEdge]!
  aggregate: AggregateValidator!
}

input ValidatorCreateInput {
  id: ID
  session: SessionCreateOneInput!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorEdge {
  node: Validator!
  cursor: String!
}

enum ValidatorOrderByInput {
  id_ASC
  id_DESC
  controller_ASC
  controller_DESC
  stash_ASC
  stash_DESC
  preferences_ASC
  preferences_DESC
}

type ValidatorPreviousValues {
  id: ID!
  controller: String!
  stash: String!
  preferences: String!
}

type ValidatorSubscriptionPayload {
  mutation: MutationType!
  node: Validator
  updatedFields: [String!]
  previousValues: ValidatorPreviousValues
}

input ValidatorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ValidatorWhereInput
  AND: [ValidatorSubscriptionWhereInput!]
  OR: [ValidatorSubscriptionWhereInput!]
  NOT: [ValidatorSubscriptionWhereInput!]
}

input ValidatorUpdateInput {
  session: SessionUpdateOneRequiredInput
  controller: String
  stash: String
  preferences: String
}

input ValidatorUpdateManyMutationInput {
  controller: String
  stash: String
  preferences: String
}

input ValidatorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  session: SessionWhereInput
  controller: String
  controller_not: String
  controller_in: [String!]
  controller_not_in: [String!]
  controller_lt: String
  controller_lte: String
  controller_gt: String
  controller_gte: String
  controller_contains: String
  controller_not_contains: String
  controller_starts_with: String
  controller_not_starts_with: String
  controller_ends_with: String
  controller_not_ends_with: String
  stash: String
  stash_not: String
  stash_in: [String!]
  stash_not_in: [String!]
  stash_lt: String
  stash_lte: String
  stash_gt: String
  stash_gte: String
  stash_contains: String
  stash_not_contains: String
  stash_starts_with: String
  stash_not_starts_with: String
  stash_ends_with: String
  stash_not_ends_with: String
  preferences: String
  preferences_not: String
  preferences_in: [String!]
  preferences_not_in: [String!]
  preferences_lt: String
  preferences_lte: String
  preferences_gt: String
  preferences_gte: String
  preferences_contains: String
  preferences_not_contains: String
  preferences_starts_with: String
  preferences_not_starts_with: String
  preferences_ends_with: String
  preferences_not_ends_with: String
  AND: [ValidatorWhereInput!]
  OR: [ValidatorWhereInput!]
  NOT: [ValidatorWhereInput!]
}

input ValidatorWhereUniqueInput {
  id: ID
}
`